/// <reference path="../typings/globals/core-js/index.d.ts" />
import * as wjcGridSheet from 'wijmo/wijmo.grid.sheet';
import * as wjcInput from 'wijmo/wijmo.input';
import { OnInit } from '@angular/core';
import { DataSvc } from './services/DataSvc';
export declare class ExcellikeSheetCmp implements OnInit {
    protected dataSvc: DataSvc;
    data: any[];
    undoStack: wjcGridSheet.UndoStack;
    fonts: any[];
    fontSizeList: any[];
    selectionFormatState: wjcGridSheet.IFormatState;
    isFrozen: boolean;
    sortManager: wjcGridSheet.SortManager;
    columns: string[];
    selection: any;
    private _updatingSelection;
    private _updateWithImport;
    private _applyFillColor;
    private _appliedClass;
    private _cellStyleApplying;
    private _pendingAction;
    flexSheet: wjcGridSheet.FlexSheet;
    cboFontName: wjcInput.ComboBox;
    cboFontSize: wjcInput.ComboBox;
    colorPicker: wjcInput.ColorPicker;
    constructor(dataSvc: DataSvc);
    ngOnInit(): void;
    flexInitialized(flexSheet: wjcGridSheet.FlexSheet): void;
    cboFontNameInit(cboFontName: wjcInput.ComboBox): void;
    cboFontSizeInit(cboFontSize: wjcInput.ComboBox): void;
    colorPickerInit(colorPicker: wjcInput.ColorPicker): void;
    exportExcel(): void;
    importExcel(event: any): void;
    newFile(): void;
    undo(): void;
    redo(): void;
    applyCellTextAlign(textAlign: any): void;
    applyBoldStyle(): void;
    applyUnderlineStyle(): void;
    applyItalicStyle(): void;
    mergeCells(): void;
    freeze(): void;
    showFilter(): void;
    showColorPicker(e: any, isFillColor: any): void;
    applyCellStyle(className: any, cancelCellStyle: any): void;
    commitSort(): void;
    cancelSort(): void;
    addSortLevel(): void;
    deleteSortLevel(): void;
    copySortLevel(): void;
    moveSortLevel(offset: any): void;
    applySortColumnIndex(e: any, sortItem: any): void;
    applySortAscending(e: any, sortItem: any): void;
    updateSelectionContent(e: any): void;
    pendingCellEditAction(): void;
    showFunctionList(e: any): void;
    hidePopup(e: any): void;
    private _generateCountrySheet(flexSheet);
    private _initDataMapForBindingSheet(flexSheet);
    private _buildDataMap(items);
    private _getColumns();
    private _updateSelection(sel);
    private _checkFontfamily(fontFamily);
    private _checkFontSize(fontSize);
    private _cumulativeOffset(element);
    private _updateFonts(importedFonts);
    private _generateUseCaseTemplateSheet(flexSheet);
    private _setContentForUseCaseTemplate(flexSheet);
    private _setExpenseData(flexSheet);
    private _applyStyleForUseCaseTemplate(flexSheet);
    private _generateFormulasSheet(flexSheet);
    private _setContentForFormulasSheet(flexSheet);
    private _applyStyleForFormulasSheet(flexSheet);
    private _adjustSize();
}
export declare class AppModule {
}
