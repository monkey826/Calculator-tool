<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>wijmo.olap Introduction</title>

    <!-- Material Lite -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons" />
    <link rel="stylesheet" href="https://code.getmdl.io/1.1.1/material.indigo-red.min.css" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:regular,bold,italic,thin,light,bolditalic,black,medium&amp;lang=en" />
    <script defer src="https://code.getmdl.io/1.1.1/material.min.js"></script>

    <!-- Syntax Highlighter -->
    <!-- <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.1.0/styles/default.min.css"> -->
    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.1.0/styles/github.min.css">
    <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.1.0/highlight.min.js"></script>

    <!-- Wijmo -->
    <link rel="stylesheet" href="styles/vendor/wijmo.min.css" />
    <link href="styles/vendor/wijmo.theme.material.min.css" rel="stylesheet" />
    <script src="scripts/vendor/wijmo.min.js"></script>
    <script src="scripts/vendor/wijmo.input.min.js"></script>
    <script src="scripts/vendor/wijmo.grid.min.js"></script>
    <script src="scripts/vendor/wijmo.grid.filter.min.js"></script>
    <script src="scripts/vendor/wijmo.chart.min.js"></script>
    <script src="scripts/vendor/wijmo.xlsx.min.js"></script>
    <script src="scripts/vendor/wijmo.grid.xlsx.min.js"></script>
    <script src="scripts/vendor/wijmo.odata.min.js"></script>
    <script src="scripts/vendor/wijmo.olap.min.js"></script>
    <script src="http://cdnjs.cloudflare.com/ajax/libs/jszip/2.5.0/jszip.min.js"></script>

    <!-- sample styles and scripts -->
    <link rel="stylesheet" href="styles/app.css" />
    <script src="scripts/app.js"></script>
</head>

<body>

    <div class="mdl-layout mdl-js-layout">

        <header class="mdl-layout__header mdl-layout__header--waterfall">
            <div class="mdl-layout__header-row">
                <img src="resources/wijmo5.png" alt="Wijmo 5" />
                <span class="mdl-layout-title">
                    Olap 101
                </span>
            </div>
            <!--<div class="mdl-layout__header-row">
                <p>
                    Add Excel-style pivot tables and charts to your HTML applications.</p>
            </div>-->
        </header>

        <main class="mdl-layout__content">
            <div class="container">

                <h3>
                    Introducing wijmo.olap
                </h3>
                <p>
                    The <b>wijmo.olap</b> module contains controls that allow you to add Excel-like pivot
                    table and pivot chart features to your JavaScript applications.
                    Follow the below steps, to use the wijmo.olap in your applications:
                </p>
                <ol>
                    <li>
                        Add <b>wijmo</b> and <b>wijmo.olap</b> module references to the page.
                    </li>
                    <li>
                        Add a <b>PivotPanel</b> control.
                    </li>
                    <li>
                        Add one or more <b>PivotGrid</b> and <b>PivotChart</b> controls to the page,
                        and connect them to the <b>PivotPanel</b> by setting their <b>itemsSource</b>
                        property to the <b>PivotPanel</b> control.
                    </li>
                    <li>
                        Set the PivotPanel's <b>itemsSource</b> property to an array containing the
                        raw data that you want to analyze.
                    </li>
                    <li>
                        (Optional) Add the code to print, export, save and load views, and to view the definitions.
                    </li>
                </ol>
                <p>
                    On doing this, a list of available fields will show in the <b>PivotPanel</b>, and
                    users will be able to drag fields between summary areas to generate data summaries
                    (also known as "views").
                    Users can also configure the fields by setting their headers, summary functions,
                    filters, and formats.
                </p>
                <p>
                    Users can analyze the data and print the results, export them to XLSX or PDF,
                    and save the view definitions to be re-used later.
                </p>
                <p>
                    Here is a simple example:
                </p>

                <h4>
                    Add a PivotPanel and a PivotGrid to the page
                </h4>
                <p>
                    The <b>PivotPanel</b> control is similar to Microsoft Excel's "field list" window
                    that is associated with pivot tables and charts.
                </p>
                <ol>
                    <li>
                        Add fields to the view by dragging or using checkboxes.
                    </li>
                    <li>
                        Remove fields from the view by dragging them back to the top area, or by using their
                        context menu.
                    </li>
                    <li>
                        Configure the fields by using their context menu. You can modify their header, summary function,
                        and format. Note that the format is used while grouping the data. You can, therefore, group the data
                        by day, month, quarter or year by changing the format of the date fields for instance.
                    </li>
                </ol>

                <p>
                    The <b>PivotGrid</b> control extends the <b>FlexGrid</b> control to support pivoting features. These
                    include custom cell merging, hierarchical row and column groups, and a custom
                    context menu, which allows users to configure the pivot fields and to drill-down
                    into the data items that were used in the computation of specific summary cells.
                </p>

                <div class="mdl-grid" id="theView">
                    <div class="mdl-cell mdl-cell--4-col">
                        <div id="pivotPanel"></div>
                    </div>
                    <div class="mdl-cell mdl-cell--8-col">
                        <div id="pivotGrid"></div>
                    </div>
                </div>

                <div class="source-card mdl-card mdl-shadow--2dp">
                    <div class="mdl-tabs mdl-js-tabs mdl-js-ripple-effect">
                        <div class="mdl-tabs__tab-bar">
                            <a href="#html-1" class="mdl-tabs__tab">HTML</a>
                            <a href="#js-1" class="mdl-tabs__tab">JS</a>
                            <a href="#close-1" class="mdl-tabs__tab is-active">X</a>
                        </div>
                        <div class="mdl-tabs__panel" id="html-1">
                            <code class="pane-content">
&lt;div class="mdl-grid"&gt;
    &lt;div class="mdl-cell mdl-cell--4-col"&gt;
        &lt;div id="pivotPanel"&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="mdl-cell mdl-cell--8-col"&gt;
        &lt;div id="pivotGrid"&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
                            </code>
                        </div>
                        <div class="mdl-tabs__panel" id="js-1">
                            <code class="pane-content">
// create PivotPanel and PivotGrid
var app = {};
app.panel = new wijmo.olap.PivotPanel('#pivotPanel');
app.pivotGrid = new wijmo.olap.PivotGrid('#pivotGrid', {
    itemsSource: app.panel
});

// configure the PivotPanel's initial view
var ng = app.panel.engine;
ng.itemsSource = app.dataSets[0].value;
ng.rowFields.push('Product', 'Country');
ng.valueFields.push('Sales', 'Downloads');
                            </code>
                        </div>
                        <div class="mdl-tabs__panel" id="close-1">
                        </div>
                    </div>
                </div>

                <p>
                    You can use the <b>viewDefinition</b> property to save and restore view definitions, as shown in the following example:
                </p>

                <button class="mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-js-ripple-effect"
                        onclick="app.saveView()">
                    Save View
                </button>
                <button class="mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-js-ripple-effect"
                        onclick="app.loadView()">
                    Load View
                </button>

                <p></p>
                <p>
                    Using <b>viewDefinition</b> property, you can also build a list of pre-defined views for the user to pick from, as shown in the following example:
                </p>
                <ul id="views"></ul>

                <div class="source-card mdl-card mdl-shadow--2dp">
                    <div class="mdl-tabs mdl-js-tabs mdl-js-ripple-effect">
                        <div class="mdl-tabs__tab-bar">
                            <a href="#html-2" class="mdl-tabs__tab">HTML</a>
                            <a href="#js-2" class="mdl-tabs__tab">JS</a>
                            <a href="#close-2" class="mdl-tabs__tab is-active">X</a>
                        </div>
                        <div class="mdl-tabs__panel" id="html-2">
                            <code class="pane-content">
&lt;button
    class="mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-js-ripple-effect"
    onclick="app.saveView()"&gt;
    Save View
&lt;/button&gt;
&lt;button
    class="mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-js-ripple-effect"
    onclick="app.loadView()"&gt;
    Load View
&lt;/button&gt;
&lt;ul id="views"&gt;
                            </code>
                        </div>
                        <div class="mdl-tabs__panel" id="js-2">
                            <code class="pane-content">
// save/restore view definitions
app.saveView = function () {
    var ng = app.panel.engine;
    if (ng.isViewDefined) {
        localStorage.viewDefinition = ng.viewDefinition;
    }
}
app.loadView = function () {
    if (localStorage.viewDefinition) {
        var ng = app.panel.engine;
        ng.viewDefinition = localStorage.viewDefinition;
    }
}

// populate list of pre-defined views
var viewList = document.getElementById('views');
for (var i = 0; i &lt; app.viewDefs.length; i++) {
    var li = wijmo.createElement('&lt;li&gt;&lt;a href="" index="' + i + '"&gt;' + app.viewDefs[i].name + '&lt;/a&gt;&lt;/li&gt;');
    viewList.appendChild(li);
}

// apply pre-defined views
viewList.addEventListener('click', function (e) {
    if (e.target.tagName == 'A') {
        app.setProperty('data', app.dataSets[3].value);
        var index = parseInt(e.target.getAttribute('index'));
        ng.viewDefinition = app.viewDefs[index].def;
        e.preventDefault();
    }
});
                            </code>
                        </div>
                        <div class="mdl-tabs__panel" id="close-2">
                        </div>
                    </div>
                </div>

                <h4>
                    Configure the PivotPanel properties
                </h4>
                <p>
                    The <b>PivotPanel</b> control has properties that allow you to customize
                    the view. Use the controls below to modify the value of some of these properties
                    and see their effect:
                </p>
                <dl class="dl-horizontal">
                    <dt>Dataset</dt>
                    <dd><div id="cmbDataSets"></div></dd>
                    <dt>Row totals</dt>
                    <dd><div id="cmbRowTotals"></div></dd>
                    <dt>Column totals</dt>
                    <dd><div id="cmbColTotals"></div></dd>
                    <dt>Show Zeros</dt>
                    <dd><input id="chkShowZeros" type="checkbox" /></dd>
                    <dt>Totals Before Data</dt>
                    <dd><input id="chkTotalsBeforeData" type="checkbox" /></dd>
                </dl>

                <div class="source-card mdl-card mdl-shadow--2dp">
                    <div class="mdl-tabs mdl-js-tabs mdl-js-ripple-effect">
                        <div class="mdl-tabs__tab-bar">
                            <a href="#html-3" class="mdl-tabs__tab">HTML</a>
                            <a href="#js-3" class="mdl-tabs__tab">JS</a>
                            <a href="#close-3" class="mdl-tabs__tab is-active">X</a>
                        </div>
                        <div class="mdl-tabs__panel" id="html-3">
                            <code class="pane-content">
&lt;dl class="dl-horizontal"&gt;
    &lt;dt&gt;Dataset&lt;dt&gt;
    &lt;dd&gt;&lt;div id="cmbDataSets"&gt;&lt;/div&gt;&lt;/dd&gt;

    &lt;dt&gt;Row totals&lt;dt&gt;
    &lt;dd&gt;&lt;div id="cmbRowTotals"&gt;&lt;/div&gt;&lt;/dd&gt;

    &lt;dt&gt;Column totals&lt;dt&gt;
    &lt;dd&gt;&lt;div id="cmbColTotals"&gt;&lt;/div&gt;&lt;/dd&gt;

    &lt;dt&gt;Show Zeros&lt;/dt&gt;
    &lt;dd&gt;&lt;input id="chkShowZeros" type="checkbox" /&gt;&lt;/dd&gt;

    &lt;dt&gt;Totals Before Data&lt;/dt&gt;
    &lt;dd&gt;&lt;input id="chkTotalsBeforeData" type="checkbox" /&gt;&lt;/dd&gt;
&lt;/dl&gt;
                            </code>
                        </div>
                        <div class="mdl-tabs__panel" id="js-3">
                            <code class="pane-content">
app.cmbDataSets = new wijmo.input.ComboBox('#cmbDataSets', {
    itemsSource: app.dataSets,
    displayMemberPath: 'name',
    selectedValuePath: 'value',
    selectedIndexChanged: function (s, e) {
        app.setProperty('data', s.selectedValue);
    }
});
app.cmbRowTotals = new wijmo.input.ComboBox('#cmbRowTotals', {
    itemsSource: app.showTotals,
    displayMemberPath: 'name',
    selectedValuePath: 'value',
    selectedIndexChanged: function (s, e) {
        app.setProperty('showRowTotals', s.selectedValue);
    }
});
app.cmbColTotals = new wijmo.input.ComboBox('#cmbColTotals', {
    itemsSource: app.showTotals,
    displayMemberPath: 'name',
    selectedValuePath: 'value',
    selectedIndexChanged: function (s, e) {
        app.setProperty('showColTotals', s.selectedValue);
    }
});
app.chkShowZeros = document.getElementById('chkShowZeros');
app.chkShowZeros.addEventListener('click', function (e) {
    app.setProperty('showZeros', app.chkShowZeros.checked);
});
app.chkTotalsBeforeData = document.getElementById('chkTotalsBeforeData');
app.chkTotalsBeforeData.addEventListener('click', function (e) {
    app.setProperty('totalsBeforeData', app.chkTotalsBeforeData.checked);
});
                            </code>
                        </div>
                        <div class="mdl-tabs__panel" id="close-3">
                        </div>
                    </div>
                </div>

                <h4>
                    Show the results in a PivotChart
                </h4>
                <p>
                    The <b>PivotChart</b> control provides a graphical visualization of the results.
                    It is similar to Microsoft Excel's pivot charts, and includes support for multiple chart
                    types and hierarchical axes.
                </p>
                <p>
                    To use the <b>PivotChart</b> control, connect it to a <b>PivotPanel</b> using
                    the <b>itemsSource</b> property.
                </p>

                <div id="chartPanel">
                    <dl class="dl-horizontal">
                        <dt>Chart Type</dt>
                        <dd><div id="cmbChartType"></div></dd>
                    </dl>
                    <div id="pivotChart"></div>
                </div>
                <div id="noChartPanel" style="display:none">
                    <p>
                        Please create a view in order to see the chart.
                    </p>
                </div>

                <div class="source-card mdl-card mdl-shadow--2dp">
                    <div class="mdl-tabs mdl-js-tabs mdl-js-ripple-effect">
                        <div class="mdl-tabs__tab-bar">
                            <a href="#html-c" class="mdl-tabs__tab">HTML</a>
                            <a href="#js-c" class="mdl-tabs__tab">JS</a>
                            <a href="#close-c" class="mdl-tabs__tab is-active">X</a>
                        </div>
                        <div class="mdl-tabs__panel" id="html-c">
                            <code class="pane-content">
&lt;dl class="dl-horizontal"&gt;
    &lt;dt&gt;Chart Type&lt;/dt&gt;
    &lt;dd&gt;&lt;div id="cmbChartType"&gt;&lt;/div&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;div id="pivotChart"&gt;&lt;/div&gt;
                            </code>
                        </div>
                        <div class="mdl-tabs__panel" id="js-c">
                            <code class="pane-content">
app.pivotChart = new wijmo.olap.PivotChart('#pivotChart', {
    itemsSource: app.panel
});
app.cmbChartType = new wijmo.input.ComboBox('#cmbChartType', {
    itemsSource: app.chartTypes,
    displayMemberPath: 'name',
    selectedValuePath: 'value',
    selectedIndexChanged: function (s, e) {
        app.pivotChart.chartType = s.selectedValue;
    }
});
                            </code>
                        </div>
                        <div class="mdl-tabs__panel" id="close-c">
                        </div>
                    </div>
                </div>

                <h4>
                    View and edit the source data
                </h4>
                <p>
                    The following pivot view is live. If you edit any of the <span id="itemCount">n</span> items,
                    the pivot view will be updated automatically.
                    <span id="readOnlyData" class="text-info">
                        (This grid is read-only because it is bound to a read-only data source.)
                    </span>
                </p>
                <div id="rawGrid" style="border:none"></div>

                <div class="source-card mdl-card mdl-shadow--2dp">
                    <div class="mdl-tabs mdl-js-tabs mdl-js-ripple-effect">
                        <div class="mdl-tabs__tab-bar">
                            <a href="#html-4" class="mdl-tabs__tab">HTML</a>
                            <a href="#js-4" class="mdl-tabs__tab">JS</a>
                            <a href="#close-4" class="mdl-tabs__tab is-active">X</a>
                        </div>
                        <div class="mdl-tabs__panel" id="html-4">
                            <code class="pane-content">
&lt;div id="rawGrid" style="border:none"&gt;&lt;/div&gt;
                            </code>
                        </div>
                        <div class="mdl-tabs__panel" id="js-4">
                            <code class="pane-content">
app.rawGrid = new wijmo.grid.FlexGrid('#rawGrid');
app.rawGridFilter = new wijmo.grid.filter.FlexGridFilter(app.rawGrid);
                            </code>
                        </div>
                        <div class="mdl-tabs__panel" id="close-4">
                        </div>
                    </div>
                </div>

                <h4>
                    Export the results to Excel
                </h4>
                <p>
                    The <b>PivotGrid</b> control extends the <b>FlexGrid</b> control, so you can export it to any of
                    the formats supported by the extension modules provided with the <b>FlexGrid</b>. The
                    list of the supported formats includes XLSLX, CSV, and PDF.
                </p>
                <p>
                    For example, the button below creates an Excel file with three sheets: the current view,
                    a transposed version of the current view, and the raw data:
                </p>
                <button class="mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-js-ripple-effect"
                        onclick="app.export()">
                    Export to XLSX
                </button>

                <div class="source-card mdl-card mdl-shadow--2dp">
                    <div class="mdl-tabs mdl-js-tabs mdl-js-ripple-effect">
                        <div class="mdl-tabs__tab-bar">
                            <a href="#html-5" class="mdl-tabs__tab">HTML</a>
                            <a href="#js-5" class="mdl-tabs__tab">JS</a>
                            <a href="#close-5" class="mdl-tabs__tab is-active">X</a>
                        </div>
                        <div class="mdl-tabs__panel" id="html-5">
                            <code class="pane-content">
&lt;button
    class="mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-js-ripple-effect"
    onclick="app.export()"&gt;
    Export to XLSX
&lt;/button&gt;
                            </code>
                        </div>
                        <div class="mdl-tabs__panel" id="js-5">
                            <code class="pane-content">
app.export = function () {

    // create book with current view
    var book = wijmo.grid.xlsx.FlexGridXlsxConverter.save(app.pivotGrid, {
        includeColumnHeaders: true,
        includeRowHeaders: true
    });
    book.sheets[0].name = 'Main View';

    // add sheet with raw data
    if (app.rawGrid.rows.length &lt; 20000) {
        var raw = wijmo.grid.xlsx.FlexGridXlsxConverter.save(app.rawGrid, {
            includeColumnHeaders: true,
            includeRowHeaders: false
        });
        raw.sheets[0].name = 'Raw Data';
        book.sheets.push(raw.sheets[0]);
    }

    // save book
    book.save('wijmo.olap.xlsx');
}
                            </code>
                        </div>
                        <div class="mdl-tabs__panel" id="close-5">
                        </div>
                    </div>
                </div>

                <h4>
                    Customize the PivotGrid cells
                </h4>
                <p>
                    The <b>PivotGrid</b> control extends the <b>FlexGrid</b> control, so you can customize the display
                    of the grid cells using the <b>formatItem</b> event and modify the content of each
                    cell with complete flexibility.
                </p>
                <p>
                    For example, the <b>PivotGrid</b> below uses colors and icons, similar to the ones in Microsoft Excel's
                    icon sets, to show how sales changed from quarter to quarter:
                </p>

                <div id="formattedGrid" style="border:none">
                </div>

                <div class="source-card mdl-card mdl-shadow--2dp">
                    <div class="mdl-tabs mdl-js-tabs mdl-js-ripple-effect">
                        <div class="mdl-tabs__tab-bar">
                            <a href="#html-6" class="mdl-tabs__tab">HTML</a>
                            <a href="#js-6" class="mdl-tabs__tab">JS</a>
                            <a href="#close-6" class="mdl-tabs__tab is-active">X</a>
                        </div>
                        <div class="mdl-tabs__panel" id="html-6">
                            <code class="pane-content">
&lt;div id="formattedGrid" style="border:none"&gt;
&lt;/div&gt;
                            </code>
                        </div>
                        <div class="mdl-tabs__panel" id="js-6">
                            <code class="pane-content">
// create a PivotEngine with a custom view
var ngFmt = new wijmo.olap.PivotEngine({
    autoGenerateFields: false,
    itemsSource: getSimpleDataSet(10000),
    showColumnTotals: wijmo.olap.ShowTotals.GrandTotals,
    showRowTotals: wijmo.olap.ShowTotals.None,
    fields: [
        { binding: 'product', header: 'Product' },
        { binding: 'date', header: 'Date', format: 'yyyy \"Q\"q' },
        { binding: 'sales', header: 'Sales', format: 'n0' },
        { binding: 'sales', header: 'Diff', format: 'p0', showAs: wijmo.olap.ShowAs.DiffRowPct }
    ]
});
ngFmt.rowFields.push('Date');
ngFmt.columnFields.push('Product');
ngFmt.valueFields.push('Sales', 'Diff');

// create a PivotGrid to show the custom view
app.formattedGrid = new wijmo.olap.PivotGrid('#formattedGrid', {
    itemsSource: ngFmt,
    formatItem: function (s, e) {
        if (e.panel == s.cells && e.col % 2 == 1) {
            var value = s.getCellData(e.row, e.col),
                color = '#d8b400',
                glyph = 'circle';
            if (value != null) {
                if (value &lt; 0) { // negative variation
                    color = '#9f0000';
                    glyph = 'down';
                } else if (value &gt; 0.05) { // positive variation
                    color = '#4c8f00';
                    glyph = 'down';
                }
                e.cell.style.color = color;
                e.cell.innerHTML += ' &lt;span style="font-size:120%" class="wj-glyph-' + glyph + '"&gt;&lt;/span&gt;';
            }
        }
    }
});
                            </code>
                        </div>
                        <div class="mdl-tabs__panel" id="close-6">
                        </div>
                    </div>
                </div>

                <p>
                    Note that in this example, we only have one pre-defined view, and do not need a <b>PivotPanel</b>. Instead, the code creates a <b>PivotEngine</b> directly and uses it as the grid's
                    <b>itemsSource</b>.
                </p>
            </div>
        </main>
    </div>
    <script src="http://cdn.wijmo.com/wijmo.sample.toolbar.js" type="text/javascript"></script>
</body>
</html>
