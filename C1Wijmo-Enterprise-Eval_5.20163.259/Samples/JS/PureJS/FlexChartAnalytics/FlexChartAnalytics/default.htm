<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=Edge">
    <title>FlexChart Analytics</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <!-- styles -->
    <link rel="stylesheet" type="text/css" href="https://netdna.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css" />
    <link rel="stylesheet" type="text/css" href="styles/vendor/wijmo.min.css" />
    <link href="styles/app.css" rel="stylesheet" type="text/css" />

    <!-- jQuery/Bootstrap -->
    <script src="http://code.jquery.com/jquery-2.2.4.min.js" type="text/javascript"></script>
    <script src="https://netdna.bootstrapcdn.com/bootstrap/3.3.2/js/bootstrap.min.js" type="text/javascript"></script>

    <!-- Wijmo -->
    <script src="scripts/vendor/wijmo.min.js" type="text/javascript"></script>
    <script src="scripts/vendor/wijmo.input.min.js" type="text/javascript"></script>
    <script src="scripts/vendor/wijmo.chart.min.js" type="text/javascript"></script>
    <script src="scripts/vendor/wijmo.chart.analytics.min.js" type="text/javascript"></script>
</head>
<body>
    <div class="header">
        <div class="container">
            <img src="resources/wijmo5.png" />
            <h1>FlexChart Analytics</h1>
            <p>
                This page shows how to use function series and trend lines in Wijmo's FlexChart control.
                These features are included in wijmo.chart.analytics module.
            </p>
        </div>
    </div>
    <div class="container">
        <!-- getting start -->
        <div>
            <h2>
                Getting Started
            </h2>
            <p>
                Steps for getting started with the FlexChart Analytics in JavaScript applications:
            </p>
            <ol>
                <li>Add references to Wijmo.</li>
                <li>Add markup to serve as the FlexChart's host.</li>
                <li>Initialize the FlexChart via JavaScript and its itemSource property.</li>
                <li>Create one or more data series, and add each to the FlexChart's series collection (Optional).</li>
                <li>Create one or more trend line or function series, and add each to the FlexChart's series collection.</li>
                <li>Add some CSS to customize the chart's appearance (Optional).</li>
            </ol>
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#gsHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#gsJs" role="tab" data-toggle="tab">JS</a></li>
                            <li><a href="#gsCss" role="tab" data-toggle="tab">CSS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane pane-content active" id="gsHtml">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;link rel="stylesheet" type="text/css" href="css/bootstrap.css"/&gt;
&lt;link rel="stylesheet" type="text/css" href="css/wijmo.css" /&gt;
&lt;link href="css/app.css" rel="stylesheet" type="text/css" /&gt;
&lt;script src="scripts/wijmo.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="scripts/wijmo.input.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="scripts/wijmo.chart.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="scripts/wijmo.chart.analytics.js" type="text/javascript"&gt;
&lt;/script&gt;
&lt;script src="scripts/app.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;!-- this is the FlexChart --&gt;
    &lt;div id="gettingStartChart"&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
                            </div>
                            <div class="tab-pane pane-content" id="gsJs">
// create FlexChart
var gettingStartedChart = new wijmo.chart.FlexChart('#gettingStartedChart');

// initialize FlexChart's properties
gettingStartedChart.initialize({
    itemsSource: appData,
    bindingX: 'x',
    series: [{ 
        name: 'Origin', 
        binding: 'y', 
        chartType: wijmo.chart.ChartType.Scatter 
    }]
});

//create TrendLine
var trendLine = new wijmo.chart.analytics.TrendLine();
trendLine.name = 'Trend Line';
trendLine.binding = 'y';
trendLine.sampleCount = 100;
gettingStartedChart.series.push(trendLine);

                            </div>
                            <div class="tab-pane pane-content" id="gsCss">
.wj-flexchart {
    background-color: white;
    box-shadow: 4px 4px 10px 0px rgba(50, 50, 50, 0.75);
    height: 400px;
    margin-bottom: 12px;
    padding: 8px;
}
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div id="gettingStartedChart"></div>
                </div>
            </div>
        </div>

        <!-- TrendLine -->
        <div>
            <h2>TrendLine</h2>
            <p>You can use different trendline types by setting the <b>fitType</b>
            property of TrendLine. </p>
            <p>The example below allows you to see what happens when you change this property:</p>
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#tlHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#tlJs" role="tab" data-toggle="tab">JS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane pane-content active" id="tlHtml">
&lt;div id="trendLineChart"&gt;&lt;/div&gt;
&lt;select id="fitTypeMenu"&gt;
    &lt;option value="0" selected="selected"&gt;Linear&lt;/option&gt;
    &lt;option value="1"&gt;Exponential&lt;/option&gt;
    &lt;option value="2"&gt;Logarithmic&lt;/option&gt;
    &lt;option value="3"&gt;Power&lt;/option&gt;
    &lt;option value="4"&gt;Fourier&lt;/option&gt;
    &lt;option value="5"&gt;Polynomial&lt;/option&gt;
    &lt;option value="6"&gt;MinX&lt;/option&gt;
    &lt;option value="7"&gt;MinY&lt;/option&gt;
    &lt;option value="8"&gt;MaxX&lt;/option&gt;
    &lt;option value="9"&gt;MaxY&lt;/option&gt;
    &lt;option value="10"&gt;AverageX&lt;/option&gt;
    &lt;option value="11"&gt;AverageY&lt;/option&gt;
&lt;/select&gt;
                            </div>
                            <div class="tab-pane pane-content" id="tlJs">
                                
// create FlexChart and Menus
var trendLineChart = new wijmo.chart.FlexChart('#trendLineChart'),
    fitTypeMenu = new wijmo.input.Menu('#fitTypeMenu'),
    trendLine;

// initialize FlexChart's properties
trendLineChart.initialize({
    itemsSource: appData,
    bindingX: 'x',
    series: [{ 
        name: 'Origin', 
        binding: 'y', 
        chartType: wijmo.chart.ChartType.Scatter 
    }]
});

//create TrendLine
trendLine = new wijmo.chart.analytics.TrendLine();
trendLine.name = 'Trend Line';
trendLine.binding = 'y';
trendLine.sampleCount = 100;
trendLineChart.series.push(trendLine);

// update the menus' headers
updateMenuHeader();

fitTypeMenu.selectedIndexChanged.addHandler(function () {
    if (fitTypeMenu.selectedValue) {
        // update TrendLine's fitType
        trendLine.fitType = parseInt(fitTypeMenu.selectedValue);

        // update menu header
        updateMenuHeader();
    }
});

// helper function for Menu headers
function updateMenuHeader() {
    fitTypeMenu.header = '&lt;b&gt;Fit Type&lt;/b&gt;: ' + fitTypeMenu.text;
}
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div id="trendLineChart"></div>
                    <select id="fitTypeMenu">
                        <option value="0" selected="selected">Linear</option>
                        <option value="1">Exponential</option>
                        <option value="2">Logarithmic</option>
                        <option value="3">Power</option>
                        <option value="4">Fourier</option>
                        <option value="5">Polynomial</option>
                        <option value="6">MinX</option>
                        <option value="7">MinY</option>
                        <option value="8">MaxX</option>
                        <option value="9">MaxY</option>
                        <option value="10">AverageX</option>
                        <option value="11">AverageY</option>
                    </select>
                </div>
            </div>
        </div>

        <!-- MovingAverage -->
        <div>
            <h2>MovingAverage</h2>
            <p>
                You can use different moving average types by setting the <b>type</b>
                property of MovingAverage.
            </p>
            <p>
                The MovingAverage class has a <b>period</b> property that allows you to set
                the number of periods for computing the average value.
            </p>
            <p>The example below allows you to see what happens when you change these properties:</p>
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#maHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#maJs" role="tab" data-toggle="tab">JS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane pane-content active" id="maHtml">
&lt;div id="movingAverageChart"&gt;&lt;/div&gt;
&lt;select id="typeMenu"&gt;
    &lt;option value="0" selected="selected"&gt;Simple&lt;/option&gt;
    &lt;option value="1"&gt;Weighted&lt;/option&gt;
    &lt;option value="2"&gt;Exponential&lt;/option&gt;
    &lt;option value="3"&gt;Triangular&lt;/option&gt;
&lt;/select&gt;
&lt;b&gt;Period:&lt;/b&gt; &lt;input id="periodInput" type="text" /&gt;
                            </div>
                            <div class="tab-pane pane-content" id="maJs">
// create FlexChart and Menus
var movingAverageChart = new wijmo.chart.FlexChart('#movingAverageChart'),
    typeMenu = new wijmo.input.Menu('#typeMenu'),
    periodInput = new wijmo.input.InputNumber('#periodInput'),
    movingAverage;

//set inputnumber
periodInput.value = 2;
periodInput.min = 2;
periodInput.max = 29;
periodInput.step = 1;
periodInput.format = "n0";

// initialize FlexChart's properties
movingAverageChart.initialize({
    itemsSource: getData(40),
    bindingX: 'x',
    series: [{
        name: 'Origin',
        binding: 'y',
        chartType: wijmo.chart.ChartType.Scatter
    }]
});

//create MovingAverage
movingAverage = new wijmo.chart.analytics.MovingAverage();
movingAverage.name = 'MA';
movingAverage.binding = 'y';
movingAverage.sampleCount = 100;
movingAverageChart.series.push(movingAverage);

// update the menus' headers
updateMenuHeader();

typeMenu.selectedIndexChanged.addHandler(function () {
    if (typeMenu.selectedValue) {
        // update MovingAverage's type
        movingAverage.type = parseInt(typeMenu.selectedValue);

        // update menu header
        updateMenuHeader();
    }
});

periodInput.valueChanged.addHandler(function () {
    // update MovingAverage's period
    movingAverage.period = periodInput.value;
});

// helper function for Menu headers
function updateMenuHeader() {
    typeMenu.header = '&lt;b&gt;Type&lt;/b&gt;: ' + typeMenu.text;
}
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div id="movingAverageChart"></div>
                    <select id="typeMenu">
                        <option value="0" selected="selected">Simple</option>
                        <option value="1">Weighted</option>
                        <option value="2">Exponential</option>
                        <option value="3">Triangular</option>
                    </select>
                    <b>Period:</b> <input id="periodInput" type="text" />
                </div>
            </div>
        </div>

        <!-- YFunctionSeries -->
        <div>
            <h2>YFunctionSeries</h2>
            <p>
                This view shows Y Function Series in FlexChart.
                The YFunctionSeries allows to plot a function that is defined with formula y=y(x). Use the <b>func</b> property to specify the function.
            </p>
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#yfsHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#yfsJs" role="tab" data-toggle="tab">JS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane pane-content active" id="yfsHtml">
&lt;div id="yFuncSeriesChart"&gt;&lt;/div&gt;
                            </div>
                            <div class="tab-pane pane-content" id="yfsJs">
// create yFuncSeriesChart
var yFuncSeriesChart = new wijmo.chart.FlexChart('#yFuncSeriesChart');

//create YFunctionSeries
var yFuncSeries = new wijmo.chart.analytics.YFunctionSeries();
yFuncSeries.name = 'YFuncSeries';
yFuncSeries.min = -10;
yFuncSeries.max = 10;
yFuncSeries.sampleCount = 300;
yFuncSeries.func = function (value) {
    return Math.sin(4 * value) * Math.cos(3 * value);
};
yFuncSeriesChart.series.push(yFuncSeries);
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div id="yFuncSeriesChart"></div>
                </div>
            </div>
        </div>

        <!-- ParametricFunctionSeries -->
        <div>
            <h2>ParametricFunctionSeries</h2>
            <p>
                The ParametricFunctionSeries allows to plot a function that is defined parametrically
            with formulas x = x(t) and y = y(t). Use the <b>xFunc</b> and <b>yFunc</b> properties
            to specify the functions for x and y coordinates.
            </p>
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#pfsHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#pfsJs" role="tab" data-toggle="tab">JS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane pane-content active" id="pfsHtml">
&lt;div id="paramFuncSeriesChart"&gt;&lt;/div&gt;
                            </div>
                            <div class="tab-pane pane-content" id="pfsJs">
//create paramFuncSeriesChart
var paramFuncSeriesChart = new wijmo.chart.FlexChart('#paramFuncSeriesChart'),
    xParam = 5,
    yParam = 7;

//create ParametricFunctionSeries
var paramFuncSeries = new wijmo.chart.analytics.ParametricFunctionSeries();
paramFuncSeries.name = 'ParamFunc';
paramFuncSeries.max = 2 * Math.PI;
paramFuncSeries.sampleCount = 1000;
paramFuncSeries.xFunc = function (value) {
    return Math.cos(value * xParam);
};
paramFuncSeries.yFunc = function (value) {
    return Math.sin(value * yParam);
};
paramFuncSeriesChart.series.push(paramFuncSeries);
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div id="paramFuncSeriesChart"></div>
                </div>
            </div>
        </div>        
        <!-- waterfall -->
        <div>
            <h2>Waterfall</h2>
            <p>
                The Waterfall series is normally used to demonstrate how the starting position either increases or decreases through a series of changes.
            </p>
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#wfHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#wfJs" role="tab" data-toggle="tab">JS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane pane-content active" id="wfHtml">
&lt;div id="waterfallChart"&gt;&lt;/div&gt;
&lt;div class="form-horizontal"&gt;
    &lt;div class="form-group"&gt;
        &lt;div class="col-md-offset-3 col-md-9"&gt;
            &lt;div class="checkbox"&gt;
                &lt;label&gt;
                    &lt;input id="relativeData" type="checkbox"&gt; Is RelativeData?
                &lt;/label&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="form-group"&gt;
        &lt;div class="col-md-offset-3 col-md-9"&gt;
            &lt;div class="checkbox"&gt;
                &lt;label&gt;
                    &lt;input id="connectorLines" type="checkbox"&gt; Show Connector Lines?
                &lt;/label&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="form-group"&gt;
        &lt;div class="col-md-offset-3 col-md-9"&gt;
            &lt;div class="checkbox"&gt;
                &lt;label&gt;
                    &lt;input id="showTotal" type="checkbox"&gt; Show Total?
                &lt;/label&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="form-group"&gt;
        &lt;div class="col-md-offset-3 col-md-9"&gt;
            &lt;div class="checkbox"&gt;
                &lt;label&gt;
                    &lt;input id="showIntermediateTotal" type="checkbox"&gt; Show Intermediate Total?
                &lt;/label&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
                            </div>
                            <div class="tab-pane pane-content" id="wfJs">
//create chart
var waterfallChart = new wijmo.chart.FlexChart('#waterfallChart'),
    relativeData = document.getElementById('relativeData'),
    connectorLines = document.getElementById('connectorLines'),
    showTotal = document.getElementById('showTotal'),
    showIntermediateTotal = document.getElementById('showIntermediateTotal');

// populate itemsSource
var names = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
    data = [];
for (var i = 0, len = names.length; i < len; i++) {
    data.push({
        name: names[i],
        value: Math.round((0.5 - Math.random()) * 1000)
    });
}
waterfallChart.itemsSource = data;
waterfallChart.binding = 'value';
waterfallChart.bindingX = 'name';

//create Waterfall series
var waterfall = new wijmo.chart.analytics.Waterfall();
waterfall.relativeData = false;
waterfall.connectorLines = false;
waterfall.showTotal = false;
waterfall.start = 1000;
waterfall.showIntermediateTotal = false;
waterfall.intermediateTotalPositions = [3, 6, 9, 12];
waterfall.intermediateTotalLabels = ['Q1', 'Q2', 'Q3', 'Q4'];
waterfall.name = 'Increase,Decrease,Total';
waterfall.styles = {
    connectorLines: {
        stroke: '#333',
        'stroke-dasharray': '5 5'
    },
    start: {
        fill: '#7dc7ed'
    },
    falling: {
        fill: '#dd2714',
        stroke: '#a52714'
    },
    rising: {
        fill: '#0f9d58',
        stroke: '#0f9d58'
    },
    intermediateTotal: {
        fill: '#7dc7ed'
    },
    total: {
        fill: '#7dc7ed'
    }
};
waterfallChart.series.push(waterfall);
waterfallChart.tooltip.content = function (ht) {
    if (ht) {
        return '&lt;b&gt;' + ht.x + '&lt;/b&gt;&lt;br/&gt;value: ' + ht.y;
    }
}

// relativeData - initialize checkbox properties
relativeData.addEventListener('change', function () {
    waterfall.relativeData = this.checked;
});

// connectorLines - initialize checkbox properties
connectorLines.addEventListener('change', function () {
    waterfall.connectorLines = this.checked;
});

// showTotal - initialize checkbox properties
showTotal.addEventListener('change', function () {
    waterfall.showTotal = this.checked;
});

// showIntermediateTotal - initialize checkbox properties
showIntermediateTotal.addEventListener('change', function () {
    waterfall.showIntermediateTotal = this.checked;
});
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div id="waterfallChart"></div>
                    <div class="form-horizontal">
                        <div class="form-group">
                            <div class="col-md-offset-3 col-md-9">
                                <div class="checkbox">
                                    <label>
                                        <input id="relativeData" type="checkbox"> Is RelativeData?
                                    </label>
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-offset-3 col-md-9">
                                <div class="checkbox">
                                    <label>
                                        <input id="connectorLines" type="checkbox"> Show Connector Lines?
                                    </label>
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-offset-3 col-md-9">
                                <div class="checkbox">
                                    <label>
                                        <input id="showTotal" type="checkbox"> Show Total?
                                    </label>
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-offset-3 col-md-9">
                                <div class="checkbox">
                                    <label>
                                        <input id="showIntermediateTotal" type="checkbox"> Show Intermediate Total?
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- BoxWhisker -->
        <div>
            <h2>Box & Whisker</h2>
            <p>
                The Box & Whisker series is normally used to compare distributions between different sets of numerical data
            </p>
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#bwHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#bwJs" role="tab" data-toggle="tab">JS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane pane-content active" id="bwHtml">
&lt;div id="boxwhiskerChart"&gt;&lt;/div&gt;
&lt;div class="form-horizontal"&gt;
&lt;dl class="dl-horizontal"&gt;
    &lt;dt&gt;Group Width&lt;/dt&gt;
    &lt;dd&gt;
        &lt;div id="boxGroupWidth"&gt;&lt;/div&gt;
    &lt;/dd&gt;
&lt;/dl&gt;
&lt;dl class="dl-horizontal"&gt;
    &lt;dt&gt;Gap Width&lt;/dt&gt;
    &lt;dd&gt;
        &lt;div id="boxGapWidth"&gt;&lt;/div&gt;
    &lt;/dd&gt;
&lt;/dl&gt;
&lt;dl class="dl-horizontal"&gt;
    &lt;dt&gt;
        &lt;label for="boxShowMeanLine"&gt;Show Mean Line&lt;/label&gt;
    &lt;/dt&gt;
    &lt;dd&gt;
        &lt;input id="boxShowMeanLine" type="checkbox" /&gt;
    &lt;/dd&gt;
&lt;/dl&gt;
&lt;dl class="dl-horizontal"&gt;
    &lt;dt&gt;
        &lt;label for="boxShowMeanMarker"&gt;Show Mean Marker&lt;/label&gt;
    &lt;/dt&gt;
    &lt;dd&gt;
        &lt;input id="boxShowMeanMarker" type="checkbox" /&gt;
    &lt;/dd&gt;
&lt;/dl&gt;
&lt;dl class="dl-horizontal"&gt;
    &lt;dt&gt;
        &lt;label for="boxShowInnerPoints"&gt;Show Inner Points&lt;/label&gt;
    &lt;/dt&gt;
    &lt;dd&gt;
        &lt;input id="boxShowInnerPoints" type="checkbox" /&gt;
    &lt;/dd&gt;
&lt;/dl&gt;
&lt;dl class="dl-horizontal"&gt;
    &lt;dt&gt;
        &lt;label for="boxShowOutliers"&gt;Show Outliers&lt;/label&gt;
    &lt;/dt&gt;
    &lt;dd&gt;
        &lt;input id="boxShowOutliers" type="checkbox" /&gt;
    &lt;/dd&gt;
&lt;/dl&gt;
&lt;dl class="dl-horizontal"&gt;
    &lt;dt&gt;
        &lt;label for="boxRotated"&gt;Rotated&lt;/label&gt;
    &lt;/dt&gt;
    &lt;dd&gt;
        &lt;input id="boxRotated" type="checkbox" /&gt;
    &lt;/dd&gt;
&lt;/dl&gt;
&lt;dl class="dl-horizontal"&gt;
    &lt;dt&gt;
        &lt;label for="boxShowLabel"&gt;Show Label&lt;/label&gt;
    &lt;/dt&gt;
    &lt;dd&gt;
        &lt;input id="boxShowLabel" type="checkbox" /&gt;
    &lt;/dd&gt;
&lt;/dl&gt;
&lt;dl class="dl-horizontal"&gt;
    &lt;dt&gt;Quartile Calculation&lt;/dt&gt;
    &lt;dd&gt;
        &lt;select id="boxQuartileCalculation"&gt;
            &lt;option value="0" selected="selected"&gt;Inclusive Median&lt;/option&gt;
            &lt;option value="1"&gt;Exclusive Median&lt;/option&gt;
        &lt;/select&gt;
    &lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
                            </div>
                            <div class="tab-pane pane-content" id="bwJs">
//create chart
var boxwhiskerChart = new wijmo.chart.FlexChart('#boxwhiskerChart'),
    groupWidth = new wijmo.input.InputNumber('#boxGroupWidth'),
    gapWidth = new wijmo.input.InputNumber('#boxGapWidth'),
    quartileCalculation = new wijmo.input.Menu('#boxQuartileCalculation');
// populate itemsSource
// generate some random data
var countries = 'US,Germany,UK,Japan,Italy,Greece'.split(','),
    funnelData = [], boxData = [];
for (var i = 0; i < countries.length; i++) {
    boxData.push({
        country: countries[i],
        downloads: [getData(), getData(), getData(), getData(), getData(), getData(), getData(), getData(), getData(), getData(), getData(), getData()],
        sales: [getData(), getData(), getData(), getData(), getData(), getData(), getData(), getData(), getData(), getData(), getData()],
        expenses: [getData(), getData(), getData(), getData(), getData(), getData(), getData(), getData(), getData(), getData(), getData(), getData(), getData()]
    });
}

function getData() {
    return Math.round(Math.random() * 100);
}
//create Box & Whisker series
boxwhiskerChart.beginUpdate();
boxwhiskerChart.tooltip.content = function (hti) {
    return '&lt;b&gt;' + hti.name + '&lt;/b&gt; - &lt;b&gt;' + hti.x + '&lt;/b&gt;&lt;/br&gt;' +
        '&lt;b&gt;min&lt;/b&gt;: ' + hti.item.min + '&lt;/br&gt;' +
        '&lt;b&gt;firstQuartile&lt;/b&gt;: ' + hti.item.firstQuartile + '&lt;/br&gt;' +
        '&lt;b&gt;median&lt;/b&gt;: ' + hti.item.median + '&lt;/br&gt;' +
        '&lt;b&gt;thirdQuartile&lt;/b&gt;: ' + hti.item.thirdQuartile + '&lt;/br&gt;' +
        '&lt;b&gt;max&lt;/b&gt;: ' + hti.item.max + '&lt;/br&gt;' +
        '&lt;b&gt;mean&lt;/b&gt;: ' + hti.item.mean + '&lt;/br&gt;';
}

boxwhiskerChart.itemsSource = boxData;
boxwhiskerChart.bindingX = 'country';
var boxwhisker1 = new wijmo.chart.analytics.BoxWhisker();
boxwhisker1.name = 'downloads';
boxwhisker1.binding = 'downloads';
boxwhiskerChart.series.push(boxwhisker1);
var boxwhisker2 = new wijmo.chart.analytics.BoxWhisker();
boxwhisker2.name = 'sales';
boxwhisker2.binding = 'sales';
boxwhiskerChart.series.push(boxwhisker2);
var boxwhisker3 = new wijmo.chart.analytics.BoxWhisker();
boxwhisker3.name = 'expenses';
boxwhisker3.binding = 'expenses';
boxwhiskerChart.series.push(boxwhisker3);
boxwhiskerChart.endUpdate();

// groupWidth - initialize InputNumber's properties
groupWidth.min = 0;
groupWidth.max = 1;
groupWidth.step = 0.1;
groupWidth.valueChanged.addHandler(function (sender) {
    if (sender.value < sender.min || sender.value > sender.max) {
        return;
    }
    boxwhisker1.groupWidth = sender.value;
    boxwhisker2.groupWidth = sender.value;
    boxwhisker3.groupWidth = sender.value;
    boxwhiskerChart.refresh(true);
});
groupWidth.value = 0.8;

// gapWidth - initialize InputNumber's properties
gapWidth.min = 0;
gapWidth.max = 1;
gapWidth.step = 0.1;
gapWidth.valueChanged.addHandler(function (sender) {
    if (sender.value < sender.min || sender.value > sender.max) {
        return;
    }
    boxwhisker1.gapWidth = sender.value;
    boxwhisker2.gapWidth = sender.value;
    boxwhisker3.gapWidth = sender.value;
    boxwhiskerChart.refresh(true);
});
gapWidth.value = 0.1;

updateMenuHeader(quartileCalculation);
quartileCalculation.selectedIndexChanged.addHandler(function () {
    if (quartileCalculation.selectedValue) {
        var val = +quartileCalculation.selectedValue;
        boxwhisker1.quartileCalculation = val;
        boxwhisker2.quartileCalculation = val;
        boxwhisker3.quartileCalculation = val;
        updateMenuHeader(quartileCalculation);
        boxwhiskerChart.refresh(true);
    }
});

var showMeanLine = document.getElementById('boxShowMeanLine');
showMeanLine.addEventListener('click', function () {
    boxwhisker1.showMeanLine = this.checked;
    boxwhisker2.showMeanLine = this.checked;
    boxwhisker3.showMeanLine = this.checked;
    boxwhiskerChart.refresh(true);
});

var showMeanMarker = document.getElementById('boxShowMeanMarker');
showMeanMarker.addEventListener('click', function () {
    boxwhisker1.showMeanMarker = this.checked;
    boxwhisker2.showMeanMarker = this.checked;
    boxwhisker3.showMeanMarker = this.checked;
    boxwhiskerChart.refresh(true);
});

var boxShowInnerPoints = document.getElementById('boxShowInnerPoints');
boxShowInnerPoints.addEventListener('click', function () {
    boxwhisker1.showInnerPoints = this.checked;
    boxwhisker2.showInnerPoints = this.checked;
    boxwhisker3.showInnerPoints = this.checked;
    boxwhiskerChart.refresh(true);
});

var boxShowOutliers = document.getElementById('boxShowOutliers');
boxShowOutliers.addEventListener('click', function () {
    boxwhisker1.showOutliers = this.checked;
    boxwhisker2.showOutliers = this.checked;
    boxwhisker3.showOutliers = this.checked;
    boxwhiskerChart.refresh(true);
});

var boxRotated = document.getElementById('boxRotated');
boxRotated.addEventListener('click', function () {
    boxwhiskerChart.rotated = this.checked;
    boxwhiskerChart.refresh(true);
});

var boxShowLabel = document.getElementById('boxShowLabel');
boxShowLabel.addEventListener('click', function () {
    boxwhiskerChart.dataLabel.content = this.checked ? '{y}' : '';
    boxwhiskerChart.refresh(true);
});

// helper function for Menu headers
function updateMenuHeader(menu) {
    menu.header = menu.text;
}
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div id="boxwhiskerChart"></div>
                    <div class="form-horizontal">
                        <dl class="dl-horizontal">
                            <dt>Group Width</dt>
                            <dd>
                                <div id="boxGroupWidth"></div>
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>Gap Width</dt>
                            <dd>
                                <div id="boxGapWidth"></div>
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>
                                <label for="boxShowMeanLine">Show Mean Line</label>
                            </dt>
                            <dd>
                                <input id="boxShowMeanLine" type="checkbox" />
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>
                                <label for="boxShowMeanMarker">Show Mean Marker</label>
                            </dt>
                            <dd>
                                <input id="boxShowMeanMarker" type="checkbox" />
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>
                                <label for="boxShowInnerPoints">Show Inner Points</label>
                            </dt>
                            <dd>
                                <input id="boxShowInnerPoints" type="checkbox" />
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>
                                <label for="boxShowOutliers">Show Outliers</label>
                            </dt>
                            <dd>
                                <input id="boxShowOutliers" type="checkbox" />
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>
                                <label for="boxRotated">Rotated</label>
                            </dt>
                            <dd>
                                <input id="boxRotated" type="checkbox" />
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>
                                <label for="boxShowLabel">Show Label</label>
                            </dt>
                            <dd>
                                <input id="boxShowLabel" type="checkbox" />
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>Quartile Calculation</dt>
                            <dd>
                                <select id="boxQuartileCalculation">
                                    <option value="0" selected="selected">Inclusive Median</option>
                                    <option value="1">Exclusive Median</option>
                                </select>
                            </dd>
                        </dl>
                    </div>
                </div>
            </div>
        </div>
        <!-- ErrorBar -->
        <div>
            <h2>ErrorBar</h2>
            <p>
                The ErrorBar helps you see margins of error and standard deviations at a glance.
            </p>
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#ebHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#ebJs" role="tab" data-toggle="tab">JS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane pane-content active" id="ebHtml">
&lt;div id="errorbarChart"&gt;&lt;/div&gt;
&lt;div class="form-horizontal"&gt;
    &lt;dl class="dl-horizontal"&gt;
        &lt;dt&gt;
            &lt;label for="ebRotated"&gt;Rotated&lt;/label&gt;
        &lt;/dt&gt;
        &lt;dd&gt;
            &lt;input id="ebRotated" type="checkbox" /&gt;
        &lt;/dd&gt;
    &lt;/dl&gt;
    &lt;dl class="dl-horizontal"&gt;
        &lt;dt&gt;Chart Type&lt;/dt&gt;
        &lt;dd&gt;
            &lt;select id="ebChartType"&gt;
                &lt;option value="0" selected="selected"&gt;Column&lt;/option&gt;
                &lt;option value="1"&gt;Bar&lt;/option&gt;
                &lt;option value="2"&gt;Scatter&lt;/option&gt;
                &lt;option value="3"&gt;Line&lt;/option&gt;
                &lt;option value="4"&gt;LineSymbols&lt;/option&gt;
                &lt;option value="5"&gt;Area&lt;/option&gt;
                &lt;option value="9"&gt;Spline&lt;/option&gt;
                &lt;option value="10"&gt;SplineSymbols&lt;/option&gt;
                &lt;option value="11"&gt;SplineArea&lt;/option&gt;
            &lt;/select&gt;
        &lt;/dd&gt;
    &lt;/dl&gt;
    &lt;dl class="dl-horizontal"&gt;
        &lt;dt&gt;Error Amount&lt;/dt&gt;
        &lt;dd&gt;
            &lt;select id="ebErrorAmount"&gt;
                &lt;option value="0" selected="selected"&gt;FixedValue&lt;/option&gt;
                &lt;option value="1"&gt;Percentage&lt;/option&gt;
                &lt;option value="2"&gt;StandardDeviation&lt;/option&gt;
                &lt;option value="3"&gt;StandardError&lt;/option&gt;
                &lt;option value="4"&gt;Custom&lt;/option&gt;
            &lt;/select&gt;
        &lt;/dd&gt;
    &lt;/dl&gt;
    &lt;dl class="dl-horizontal"&gt;
        &lt;dt&gt;End Style&lt;/dt&gt;
        &lt;dd&gt;
            &lt;select id="ebEndStyle"&gt;
                &lt;option value="0" selected="selected"&gt;Cap&lt;/option&gt;
                &lt;option value="1"&gt;No Cap&lt;/option&gt;
            &lt;/select&gt;
        &lt;/dd&gt;
    &lt;/dl&gt;
    &lt;dl class="dl-horizontal"&gt;
        &lt;dt&gt;Direction&lt;/dt&gt;
        &lt;dd&gt;
            &lt;select id="ebDirection"&gt;
                &lt;option value="0" selected="selected"&gt;Both&lt;/option&gt;
                &lt;option value="1"&gt;Minus&lt;/option&gt;
                &lt;option value="2"&gt;Plus&lt;/option&gt;
            &lt;/select&gt;
        &lt;/dd&gt;
    &lt;/dl&gt;
&lt;/div&gt;
                            </div>
                            <div class="tab-pane pane-content" id="ebJs">
//create chart
var errorbarChart = new wijmo.chart.FlexChart('#errorbarChart'),
    chartType = new wijmo.input.Menu('#ebChartType'),
    errorAmount = new wijmo.input.Menu('#ebErrorAmount'),
    endStyle = new wijmo.input.Menu('#ebEndStyle'),
    direction = new wijmo.input.Menu('#ebDirection');

var countries = 'US,Germany,UK,Japan,Italy,Greece,China,France,Russia'.split(','),
    appData = [];
for (var i = 0; i < countries.length; i++) {
    appData.push({
        country: countries[i],
        downloads: getData(),
        sales: getData()
    });
}

function getData() {
    var val = Math.round(Math.random() * 100);
    return val > 10 ? val : val + 10;
}

//create Box & Whisker series
errorbarChart.beginUpdate();
errorbarChart.tooltip.content = '{y}';

errorbarChart.itemsSource = appData;
errorbarChart.bindingX = 'country';
var errorBar = new wijmo.chart.analytics.ErrorBar();
errorBar.binding = 'downloads';
errorBar.value = 10;
errorbarChart.series.push(errorBar);
errorbarChart.endUpdate();

var ebRotated = document.getElementById('ebRotated');
ebRotated.addEventListener('click', function () {
    errorbarChart.rotated = this.checked;
    errorbarChart.refresh(true);
});

updateMenuHeader(chartType);
chartType.selectedIndexChanged.addHandler(function () {
    if (chartType.selectedValue) {
        var val = +chartType.selectedValue;
        errorbarChart.chartType = val;
        updateMenuHeader(chartType);
        errorbarChart.refresh(true);
    }
});

updateMenuHeader(errorAmount);
errorAmount.selectedIndexChanged.addHandler(function () {
    if (errorAmount.selectedValue) {
        var val = +errorAmount.selectedValue;
        errorBar.errorAmount = val;
        if (val === 0) {
            errorBar.value = 10;
        } else if (val === 1) {
            errorBar.value = 0.1;
        } else if (val === 2) {
            errorBar.value = 1;
        } else if (val === 4) {
            errorBar.value = {
                minus: 5,
                plus: 10
            };
        }
        updateMenuHeader(errorAmount);
        errorbarChart.refresh(true);
    }
});

updateMenuHeader(endStyle);
endStyle.selectedIndexChanged.addHandler(function () {
    if (endStyle.selectedValue) {
        var val = +endStyle.selectedValue;
        errorBar.endStyle = val;
        updateMenuHeader(endStyle);
        errorbarChart.refresh(true);
    }
});

updateMenuHeader(direction);
direction.selectedIndexChanged.addHandler(function () {
    if (direction.selectedValue) {
        var val = +direction.selectedValue;
        errorBar.direction = val;
        updateMenuHeader(direction);
        errorbarChart.refresh(true);
    }
});

// helper function for Menu headers
function updateMenuHeader(menu) {
    menu.header = menu.text;
}
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div id="errorbarChart"></div>
                    <div class="form-horizontal">
                        <dl class="dl-horizontal">
                            <dt>
                                <label for="ebRotated">Rotated</label>
                            </dt>
                            <dd>
                                <input id="ebRotated" type="checkbox" />
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>Chart Type</dt>
                            <dd>
                                <select id="ebChartType">
                                    <option value="0" selected="selected">Column</option>
                                    <option value="1">Bar</option>
                                    <option value="2">Scatter</option>
                                    <option value="3">Line</option>
                                    <option value="4">LineSymbols</option>
                                    <option value="5">Area</option>
                                    <option value="9">Spline</option>
                                    <option value="10">SplineSymbols</option>
                                    <option value="11">SplineArea</option>
                                </select>
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>Error Amount</dt>
                            <dd>
                                <select id="ebErrorAmount">
                                    <option value="0" selected="selected">FixedValue</option>
                                    <option value="1">Percentage</option>
                                    <option value="2">StandardDeviation</option>
                                    <option value="3">StandardError</option>
                                    <option value="4">Custom</option>
                                </select>
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>End Style</dt>
                            <dd>
                                <select id="ebEndStyle">
                                    <option value="0" selected="selected">Cap</option>
                                    <option value="1">No Cap</option>
                                </select>
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>Direction</dt>
                            <dd>
                                <select id="ebDirection">
                                    <option value="0" selected="selected">Both</option>
                                    <option value="1">Minus</option>
                                    <option value="2">Plus</option>
                                </select>
                            </dd>
                        </dl>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="scripts/app.js" type="text/javascript"></script>
    <script src="scripts/gettingstart.js" type="text/javascript"></script>
    <script src="scripts/trendline.js" type="text/javascript"></script>
    <script src="scripts/movingaverage.js" type="text/javascript"></script>
    <script src="scripts/functionseries.js" type="text/javascript"></script>
    <script src="scripts/waterfall.js" type="text/javascript"></script>
    <script src="scripts/boxwhisker.js" type="text/javascript"></script>
    <script src="scripts/errorbar.js" type="text/javascript"></script>

    <!-- Google analytics -->
    
    <script src="http://cdn.wijmo.com/wijmo.sample.toolbar.js" type="text/javascript"></script>
</body>
</html>
