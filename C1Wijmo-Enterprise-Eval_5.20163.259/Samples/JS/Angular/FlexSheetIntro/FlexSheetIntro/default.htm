<!DOCTYPE html>
<html>
<head>
    <title>FlexSheet Introduction</title>
    <!-- ensure IE uses the latest version of IE (yes, yes...) -->
    <meta http-equiv="X-UA-Compatible" content="IE=Edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <!-- jQuery/Angular/Bootstrap -->
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.3.15/angular.min.js" type="text/javascript"></script>
    <link rel="stylesheet" type="text/css" href="https://netdna.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css" />

    <!-- JSZip library -->
    <script src="http://cdnjs.cloudflare.com/ajax/libs/jszip/2.5.0/jszip.min.js"></script>

    <!-- Wijmo -->
    <script src="scripts/vendor/wijmo.min.js" type="text/javascript"></script>
    <script src="scripts/vendor/wijmo.input.min.js" type="text/javascript"></script>
    <script src="scripts/vendor/wijmo.grid.min.js" type="text/javascript"></script>
    <script src="scripts/vendor/wijmo.grid.filter.min.js" type="text/javascript"></script>
    <script src="scripts/vendor/wijmo.grid.sheet.min.js" type="text/javascript"></script>
    <script src="scripts/vendor/wijmo.grid.xlsx.min.js" type="text/javascript"></script>
    <script src="scripts/vendor/wijmo.xlsx.min.js" type="text/javascript"></script>
    <link href="styles/vendor/wijmo.min.css" rel="stylesheet" />
    <link href="styles/vendor/wijmo.theme.office.min.css" rel="stylesheet" />

    <!-- Wijmo-Angular interop -->
    <script src="scripts/vendor/wijmo.angular.min.js" type="text/javascript"></script>

    <!-- app scripts and styles -->
    <script src="scripts/app.js" type="text/javascript"></script>
    <script src="scripts/services/dataService.js" type="text/javascript"></script>
    <script src="scripts/directives/appDctv.js" type="text/javascript"></script>
    <script src="scripts/controllers/appCtrl.js" type="text/javascript"></script>
    <link href="styles/app.css" rel="stylesheet" type="text/css" />
</head>
<body ng-app="app" ng-controller="appCtrl">
    <div class="header visible-xs visible-sm">
        <div class="container">
            <h1>
                FlexSheet 101
            </h1>
        </div>
    </div>
    <div class="header hidden-xs hidden-sm">
        <div class="container">
            <img src="resources/wijmo5.png" />
            <h1>
                FlexSheet 101
            </h1>
            <p>
                This page shows how to get started with Wijmo's FlexSheet control.
            </p>
        </div>
    </div>
    <div class="container">

        <!-- getting started -->
        <h2 id="Start">
            Getting Started
        </h2>
        <p>
            Steps for getting started with FlexSheet in AngularJS applications:
        </p>
        <ol>
            <li>Add references to AngularJS, Wijmo, and Wijmo's AngularJS directives.</li>
            <li>
                Include the Wijmo 5 directives in the app module: <br />
                <code>var app = angular.module('app', ['wj']);</code>
            </li>
            <li>Add a controller to provide data and logic.</li>
            <li>Add a FlexSheet control to the page.</li>
            <li>Add a Sheet to the FlexSheet. </li>
            <li>Add some CSS to customize the flexsheet's appearance.</li>
        </ol>
        <div class="row">
            <div class="col-md-6">
                <app-tab>
                    <app-tab-pane title="HTML">
                        <div class="pane-content">
&lt;html&gt;
&lt;head&gt;
    &lt;link rel="stylesheet" type="text/css" href="css/bootstrap.css"/&gt;
    &lt;link rel="stylesheet" type="text/css" href="css/wijmo.css" /&gt;
    &lt;link href="css/app.css" rel="stylesheet" type="text/css" /&gt;

    &lt;script src="http://cdnjs.cloudflare.com/ajax/libs/jszip/2.5.0/jszip.min.js"&gt;&lt;/script&gt;
    &lt;script src="scripts/angular.js" type="text/javascript"&gt;&lt;/script&gt;
    &lt;script src="scripts/wijmo.js" type="text/javascript"&gt;&lt;/script&gt;
    &lt;script wj-src="wijmo.input" src="bin/Devel/loaders/wijmo.load.module.js" type="text/javascript"&gt;&lt;/script&gt;
    &lt;script src="scripts/wijmo.grid.js" type="text/javascript"&gt;&lt;/script&gt;
    &lt;script wj-src="wijmo.grid.filter" src="bin/Devel/loaders/wijmo.load.module.js" type="text/javascript"&gt;&lt;/script&gt;
    &lt;script wj-src="wijmo.grid.sheet" src="bin/Devel/loaders/wijmo.load.module.js" type="text/javascript"&gt;&lt;/script&gt;
    &lt;script wj-src="wijmo.grid.xlsx" src="bin/Devel/loaders/wijmo.load.module.js" type="text/javascript"&gt;&lt;/script&gt;
    &lt;script wj-src="wijmo.xlsx" src="bin/Devel/loaders/wijmo.load.module.js" type="text/javascript"&gt;&lt;/script&gt;
    &lt;script src="scripts/wijmo.angular.js" type="text/javascript"&gt;&lt;/script&gt;
    &lt;script src="scripts/app.js" type="text/javascript"&gt;&lt;/script&gt;
    &lt;script src="scripts/services/dataService.js" type="text/javascript"&gt;&lt;/script&gt;
    &lt;script src="scripts/directives/appDctv.js" type="text/javascript"&gt;&lt;/script&gt;
    &lt;script src="scripts/controllers/appCtrl.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body ng-app="app" ng-controller="appCtrl"&gt;
    &lt;!-- this is the flexsheet --&gt;
    &lt;wj-flex-sheet initialized="initialized(s)"&gt;
        &lt;wj-sheet name="Country" items-source="ctx.data"&gt;&lt;/wj-sheet&gt;
        &lt;wj-sheet name="Empty Sheet"&gt;&lt;/wj-sheet&gt;
    &lt;/wj-flex-sheet&gt;
&lt;/body&gt;
&lt;/html&gt;
                        </div>
                    </app-tab-pane>
                    <app-tab-pane title="JS">
                        <div class="pane-content">
// declare app module
var app = angular.module('app', ['wj']);

// app controller provides data
app.controller('appCtrl', function ($scope, dataService) {
    $scope.ctx = {
        data: dataService.getData(50),
        flexSheet: null
    }
    });
    // initialize the flexSheet control when document ready.
    $scope.initialized = function (s) {
        s.deferUpdate(function () {
            var column;

            for (var i = 0; i < s.sheets.length; i++) {
                s.sheets.selectedIndex = i;
                if (s.sheets[i].name === 'Country') {
                    initDataMapForBindingSheet(s);
                }
            }
            s.selectedSheetIndex = 0;
        });
    };

    // initialize the dataMap for the bound sheet.
    function initDataMapForBindingSheet(flexSheet) {
        var column;

        if (flexSheet) {
            column = flexSheet.columns.getColumn('countryId');
            if (column && !column.dataMap) {
                column.dataMap = buildDataMap(dataService.getCountries());
            }
            column = flexSheet.columns.getColumn('productId');
            if (column && !column.dataMap) {
                column.dataMap = buildDataMap(dataService.getProducts());
            }
        }
    };

    // build a data map from a string array using the indices as keys
    function buildDataMap(items) {
        var map = [];
        for (var i = 0; i < items.length; i++) {
            map.push({ key: i, value: items[i] });
        }
        return new wijmo.grid.DataMap(map, 'key', 'value');
    };
})
                        </div>
                    </app-tab-pane>
                    <app-tab-pane title="CSS">
                        <div class="pane-content">
/* set default grid style */
.wj-flexsheet {
    height: 400px;
    background-color: white;
    box-shadow: 4px 4px 10px 0px rgba(50, 50, 50, 0.75);
    margin-bottom: 12px;
}
                        </div>
                    </app-tab-pane>
                </app-tab>
            </div>
            <div class="col-md-6">
                <h4>
                    Result (live):
                </h4>
                <wj-flex-sheet initialized="initialized(s)">
                    <wj-sheet name="Country" items-source="ctx.data"></wj-sheet>
                    <wj-sheet name="Empty Sheet"></wj-sheet>
                </wj-flex-sheet>
            </div>
        </div>

        <!-- Sorting -->
        <h2 id="sort">
            Sorting
        </h2>
        <p>
            FlexSheet can be sorted by any of its columns.
        </p>
        <p>
            The <b>SortManager</b> helps FlexSheet to manage the sort process. The following example uses SortManager to specify the order of the sorting, add or remove sort columns, and change the order of the sort columns.
        </p>
        <div class="row">
            <div class="col-md-6">
                <app-tab>
                    <app-tab-pane title="HTML">
                        <div class="pane-content">
&lt;wj-flex-sheet control="ctx.sortSheet" initialized="initialized(s)"&gt;
    &lt;wj-sheet name="Country" items-source="ctx.data"&gt;&lt;/wj-sheet&gt;
&lt;/wj-flex-sheet&gt;
&lt;table class="table table-bordered"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th class="text-center"&gt;Column&lt;/th&gt;
            &lt;th class="text-center"&gt;Order&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr ng-repeat="sortItem in ctx.sortManager.sortDescriptions.items"
            ng-click="ctx.sortManager.sortDescriptions.moveCurrentTo(sortItem)"
            ng-class="{success: sortItem === ctx.sortManager.sortDescriptions.currentItem}"&gt;
            &lt;td&gt;
                &lt;select class="form-control" ng-model="sortItem.columnIndex"&gt;
                    &lt;option value=-1&gt;&lt;/option&gt;
                    &lt;option ng-repeat="column in ctx.columns" ng-selected="$index === sortItem.columnIndex" value={&#8203;{$index}}&gt;
                        {&#8203;{column}}
                    &lt;/option&gt;
                &lt;/select&gt;
            &lt;/td&gt;
            &lt;td&gt;
                &lt;select class="form-control" ng-model="sortItem.ascending" ng-options="o.v as o.n for o in [{n: 'Ascending', v: true}, {n: 'Descending', v: false}]"&gt;&lt;/select&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="btn-group"&gt;
    &lt;button type="button" class="btn btn-default" ng-click="addSortLevel()"&gt;
        Add Level
    &lt;/button&gt;
    &lt;button type="button" class="btn btn-default" ng-click="deleteSortLevel()"&gt;
        Delete Level
    &lt;/button&gt;
    &lt;button type="button" class="btn btn-default" ng-click="copySortLevel()"&gt;
        Copy Level
    &lt;/button&gt;
&lt;/div&gt;
&lt;div class="btn-group"&gt;
    &lt;button id="moveup" type="button" class="btn btn-default" ng-disabled="ctx.sortManager.sortDescriptions.currentPosition &lt;= 0" ng-click="moveSortLevel(-1)"&gt;
        &lt;span class="glyphicon glyphicon-arrow-up"&gt;&lt;/span&gt;
    &lt;/button&gt;
    &lt;button id="movedown" type="button" class="btn btn-default" ng-disabled="ctx.sortManager.sortDescriptions.currentPosition &gt;= ctx.sortManager.sortDescriptions.itemCount - 1" ng-click="moveSortLevel(1)"&gt;
        &lt;span class="glyphicon glyphicon-arrow-down"&gt;&lt;/span&gt;
    &lt;/button&gt;
&lt;/div&gt;
&lt;div class="btn-group"&gt;
    &lt;button type="button" class="btn btn-default" ng-click="commitSort()"&gt;OK&lt;/button&gt;
    &lt;button type="button" class="btn btn-default" ng-click="cancelSort()"&gt;Cancel&lt;/button&gt;
&lt;/div&gt;
                        </div>
                    </app-tab-pane>
                    <app-tab-pane title="JS">
                        <div class="pane-content">
$scope.$watch('ctx.sortSheet', function () {
    var flexSheet = $scope.ctx.sortSheet;
    if (flexSheet) {
        $scope.ctx.columns = getColumns();
        if (!$scope.ctx.sortManager) {
            $scope.ctx.sortManager = flexSheet.sortManager;
        }
        flexSheet.selectedSheetChanged.addHandler(function (sender, args) {
            $scope.ctx.columns = getColumns();
            safeApply('ctx.sortManager');
        });
    }
});

// commit the sorts
$scope.commitSort = function () {
    $scope.ctx.sortManager.commitSort();
};

// cancel the sorts
$scope.cancelSort = function () {
    $scope.ctx.sortManager.cancelSort();
};

// add new sort level
$scope.addSortLevel = function () {
    $scope.ctx.sortManager.addSortLevel();
};

// delete current sort level
$scope.deleteSortLevel = function () {
    $scope.ctx.sortManager.deleteSortLevel();
};

// copy a new sort level by current sort level setting.
$scope.copySortLevel = function () {
    $scope.ctx.sortManager.copySortLevel();
};

// move the sort level
$scope.moveSortLevel = function (offset) {
    $scope.ctx.sortManager.moveSortLevel(offset);
};

// get the columns with the column header text for the column selection for sort setting.
function getColumns() {
    var columns = [],
    flex = $scope.ctx.sortSheet,
    i = 0;
    if (flex) {
        for (; i < flex.columns.length; i++) {
            columns.push('Column ' + wijmo.grid.sheet.FlexSheet.convertNumberToAlpha(i));
        }
    }
    return columns;
}

// Safe invoking the $apply function.
function safeApply(property) {
    if (!$scope.$root.$$phase) {
        $scope.$apply(property);
    }
};
                        </div>
                    </app-tab-pane>
                </app-tab>
            </div>
            <div class="col-md-6">
                <h4>
                    Result (live):
                </h4>
                <wj-flex-sheet control="ctx.sortSheet" initialized="initialized(s)">
                    <wj-sheet name="Country" items-source="ctx.data"></wj-sheet>
                </wj-flex-sheet>
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th class="text-center">Column</th>
                            <th class="text-center">Order</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr ng-repeat="sortItem in ctx.sortManager.sortDescriptions.items"
                            ng-click="ctx.sortManager.sortDescriptions.moveCurrentTo(sortItem)"
                            ng-class="{success: sortItem === ctx.sortManager.sortDescriptions.currentItem}">
                            <td>
                                <select class="form-control" ng-model="sortItem.columnIndex">
                                    <option value=-1></option>
                                    <option ng-repeat="column in ctx.columns" ng-selected="$index === sortItem.columnIndex"
                                            value={{$index}}>
                                        {{column}}
                                    </option>
                                </select>
                            </td>
                            <td>
                                <select class="form-control" ng-model="sortItem.ascending"
                                        ng-options="o.v as o.n for o in [{n: 'Ascending', v: true}, {n: 'Descending', v: false}]"></select>
                            </td>
                        </tr>
                    </tbody>
                </table>
                <div class="btn-group">
                    <button type="button" class="btn btn-default" ng-click="addSortLevel()">
                        Add Level
                    </button>
                    <button type="button" class="btn btn-default" ng-click="deleteSortLevel()">
                        Delete Level
                    </button>
                    <button type="button" class="btn btn-default" ng-click="copySortLevel()">
                        Copy Level
                    </button>
                </div>
                <div class="btn-group">
                    <button id="moveup" type="button"
                            class="btn btn-default"
                            ng-disabled="ctx.sortManager.sortDescriptions.currentPosition <= 0"
                            ng-click="moveSortLevel(-1)">
                        <span class="glyphicon glyphicon-arrow-up"></span>
                    </button>
                    <button id="movedown" type="button"
                            class="btn btn-default"
                            ng-disabled="ctx.sortManager.sortDescriptions.currentPosition >= ctx.sortManager.sortDescriptions.itemCount - 1"
                            ng-click="moveSortLevel(1)">
                        <span class="glyphicon glyphicon-arrow-down"></span>
                    </button>
                </div>
                <div class="btn-group">
                    <button type="button" class="btn btn-default" ng-click="commitSort()">OK</button>
                    <button type="button" class="btn btn-default" ng-click="cancelSort()">Cancel</button>
                </div>
            </div>
        </div>

        <!-- Format Cells -->
        <h2 id="format">
            Format Cells
        </h2>
        <p>
            FlexSheet allows you to set format for each cell. This includes setting font style, data format of cell value (Date/Number format), cell's fill color and horizontal alignment.
        </p>
        <div class="row">
            <div class="col-md-6">
                <app-tab>
                    <app-tab-pane title="HTML">
                        <div class="pane-content">
&lt;wj-flex-sheet control="ctx.formatSheet" initialized="initializeFormatSheet(s)"&gt;
    &lt;wj-sheet name="Number" row-count="20" column-count="8"&gt;&lt;/wj-sheet&gt;
    &lt;wj-sheet name="Date" row-count="20" column-count="8"&gt;&lt;/wj-sheet&gt;
&lt;/wj-flex-sheet&gt;
&lt;wj-color-picker style="display:none;position:fixed;z-index:100" control="ctx.colorPicker"&gt;&lt;/wj-color-picker&gt;
&lt;div class="well well-lg"&gt;
    &lt;div&gt;
        Format:
        &lt;wj-menu header="Format" visible="true" value="ctx.format"&gt;
        &lt;wj-menu-item value="'0'"&gt;Decimal Format&lt;/wj-menu-item&gt;
        &lt;wj-menu-item value="'n2'"&gt;Number Format&lt;/wj-menu-item&gt;
        &lt;wj-menu-item value="'p2'"&gt;Percentage Format&lt;/wj-menu-item&gt;
        &lt;wj-menu-item value="'c2'"&gt;Currency Format&lt;/wj-menu-item&gt;
        &lt;wj-menu-separator&gt;&lt;/wj-menu-separator&gt;
        &lt;wj-menu-item value="'d'"&gt;Short Date&lt;/wj-menu-item&gt;
        &lt;wj-menu-item value="'D'"&gt;Long Date&lt;/wj-menu-item&gt;
        &lt;wj-menu-item value="'f'"&gt;Full Date/TIme (short time)&lt;/wj-menu-item&gt;
        &lt;wj-menu-item value="'F'"&gt;Full Date/TIme (long time)&lt;/wj-menu-item&gt;
        &lt;/wj-menu&gt;
    &lt;/div&gt;
    &lt;div&gt;
        Font:
        &lt;wj-combo-box style="width:120px"
                        control="ctx.cboFontName"
                        items-source="ctx.fonts"
                        selected-index="0"
                        display-member-path="name"
                        selected-value-path="value"
                        is-editable="false"&gt;
        &lt;/wj-combo-box&gt;
        &lt;wj-combo-box style="width:80px"
                        control="ctx.cboFontSize"
                        items-source="ctx.fontSizeList"
                        selected-index="5"
                        display-member-path="name"
                        selected-value-path="value"
                        is-editable="false"&gt;
        &lt;/wj-combo-box&gt;
        &lt;div class="btn-group"&gt;
            &lt;button type="button" class="btn btn-default {&#8203;{ctx.selectionFormatState.isBold ? 'active' : ''}}" ng-click="applyBoldStyle()"&gt;Bold&lt;/button&gt;
            &lt;button type="button" class="btn btn-default {&#8203;{ctx.selectionFormatState.isItalic ? 'active' : ''}}" ng-click="applyItalicStyle()"&gt;Italic&lt;/button&gt;
            &lt;button type="button" class="btn btn-default {&#8203;{ctx.selectionFormatState.isUnderline ? 'active' : ''}}" ng-click="applyUnderlineStyle()"&gt;Underline&lt;/button&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div&gt;
        Color:
        &lt;div class="btn-group"&gt;
            &lt;button type="button" class="btn btn-default" ng-click="showColorPicker($event, false)"&gt;Fore Color&lt;/button&gt;
            &lt;button type="button" class="btn btn-default" ng-click="showColorPicker($event, true)"&gt;Fill Color&lt;/button&gt;
        &lt;/div&gt;
        Alignment:
        &lt;div class="btn-group"&gt;
            &lt;button type="button" class="btn btn-default {&#8203;{ctx.selectionFormatState.textAlign === 'left' ? 'active' : ''}}" ng-click="applyCellTextAlign('left')"&gt;Left&lt;/button&gt;
            &lt;button type="button" class="btn btn-default {&#8203;{ctx.selectionFormatState.textAlign === 'center' ? 'active' : ''}}" ng-click="applyCellTextAlign('center')"&gt;Center&lt;/button&gt;
            &lt;button type="button" class="btn btn-default {&#8203;{ctx.selectionFormatState.textAlign === 'right' ? 'active' : ''}}" ng-click="applyCellTextAlign('right')"&gt;Right&lt;/button&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
                        </div>
                    </app-tab-pane>
                    <app-tab-pane title="JS">
                        <div class="pane-content">
// initialize the colorPicker control.
$scope.$watch('ctx.colorPicker', function () {
    var colorPicker = $scope.ctx.colorPicker,
    ua = window.navigator.userAgent,
    blurEvt;

    if (colorPicker) {
        // if the browser is firefox, we should bind the blur event. (TFS #124387)
        // if the browser is IE, we should bind the focusout event. (TFS #124500)
        blurEvt = /firefox/i.test(ua) ? 'blur' : 'focusout';
        // Hide the color picker control when it lost the focus.
        colorPicker.hostElement.addEventListener(blurEvt, function () {
            setTimeout(function () {
                if (!colorPicker.containsFocus()) {
                    applyFillColor = false;
                    colorPicker.hostElement.style.display = 'none';
                }
            }, 0);
        });

        // Initialize the value changed event handler for the color picker control.
        colorPicker.valueChanged.addHandler(function () {
            if (applyFillColor) {
                $scope.ctx.formatSheet.applyCellsStyle({ backgroundColor: colorPicker.value });
            } else {
                $scope.ctx.formatSheet.applyCellsStyle({ color: colorPicker.value });
            }
        });
    }
});

$scope.$watch('ctx.format', function () {
    var flexSheet = $scope.ctx.formatSheet;
    if (flexSheet && !updatingSelection) {
        flexSheet.applyCellsStyle({ format: $scope.ctx.format });
    }
});

// initialize the cboFontName control.
$scope.$watch('ctx.cboFontName', function () {
    var cboFontName = $scope.ctx.cboFontName;
    if (cboFontName) {
        cboFontName.selectedIndexChanged.addHandler(function () {
            // apply the font family for the selected cells
            if (!updatingSelection) {
                $scope.ctx.formatSheet.applyCellsStyle({ fontFamily: $scope.ctx.cboFontName.selectedItem.value });
            }
        });
    }
});

// initialize the cboFontSize control.
$scope.$watch('ctx.cboFontSize', function () {
    var cboFontSize = $scope.ctx.cboFontSize;
    if (cboFontSize) {
        cboFontSize.selectedIndexChanged.addHandler(function () {
            // apply the font size for the selected cells
            if (!updatingSelection) {
                $scope.ctx.formatSheet.applyCellsStyle({ fontSize: $scope.ctx.cboFontSize.selectedItem.value });
            }
        });
    }
})

// apply the text alignment for the selected cells
$scope.applyCellTextAlign = function (textAlign) {
    $scope.ctx.formatSheet.applyCellsStyle({ textAlign: textAlign });
    $scope.ctx.selectionFormatState.textAlign = textAlign;
};

// apply the bold font weight for the selected cells
$scope.applyBoldStyle = function () {
    $scope.ctx.formatSheet.applyCellsStyle({ fontWeight: $scope.ctx.selectionFormatState.isBold ? 'none' : 'bold' });
    $scope.ctx.selectionFormatState.isBold = !$scope.ctx.selectionFormatState.isBold;
};

// apply the underline text decoration for the selected cells
$scope.applyUnderlineStyle = function () {
    $scope.ctx.formatSheet.applyCellsStyle({ textDecoration: $scope.ctx.selectionFormatState.isUnderline ? 'none' : 'underline' });
    $scope.ctx.selectionFormatState.isUnderline = !$scope.ctx.selectionFormatState.isUnderline;
};

// apply the italic font style for the selected cells
$scope.applyItalicStyle = function () {
    $scope.ctx.formatSheet.applyCellsStyle({ fontStyle: $scope.ctx.selectionFormatState.isItalic ? 'none' : 'italic' });
    $scope.ctx.selectionFormatState.isItalic = !$scope.ctx.selectionFormatState.isItalic;
};
                        </div>
                    </app-tab-pane>
                </app-tab>
            </div>
            <div class="col-md-6">
                <h4>
                    Result (live):
                </h4>
                <wj-flex-sheet control="ctx.formatSheet" initialized="initializeFormatSheet(s)">
                    <wj-sheet name="Number" row-count="20" column-count="8"></wj-sheet>
                    <wj-sheet name="Date" row-count="20" column-count="8"></wj-sheet>
                </wj-flex-sheet>
                <wj-color-picker style="display:none;position:fixed;z-index:100" control="ctx.colorPicker"></wj-color-picker>
                <div class="well well-lg">
                    <div>
                        Format:
                        <wj-menu header="Format" visible="true" value="ctx.format">
                            <wj-menu-item value="'0'">Decimal Format</wj-menu-item>
                            <wj-menu-item value="'n2'">Number Format</wj-menu-item>
                            <wj-menu-item value="'p2'">Percentage Format</wj-menu-item>
                            <wj-menu-item value="'c2'">Currency Format</wj-menu-item>
                            <wj-menu-separator></wj-menu-separator>
                            <wj-menu-item value="'d'">Short Date</wj-menu-item>
                            <wj-menu-item value="'D'">Long Date</wj-menu-item>
                            <wj-menu-item value="'f'">Full Date/TIme (short time)</wj-menu-item>
                            <wj-menu-item value="'F'">Full Date/TIme (long time)</wj-menu-item>
                        </wj-menu>
                    </div>
                    <div>
                        Font:
                        <wj-combo-box style="width:120px"
                                      control="ctx.cboFontName"
                                      items-source="ctx.fonts"
                                      selected-index="0"
                                      display-member-path="name"
                                      selected-value-path="value"
                                      is-editable="false">
                        </wj-combo-box>
                        <wj-combo-box style="width:80px"
                                      control="ctx.cboFontSize"
                                      items-source="ctx.fontSizeList"
                                      selected-index="5"
                                      display-member-path="name"
                                      selected-value-path="value"
                                      is-editable="false">
                        </wj-combo-box>
                        <div class="btn-group">
                            <button type="button" class="btn btn-default {{ctx.selectionFormatState.isBold ? 'active' : ''}}" ng-click="applyBoldStyle()">Bold</button>
                            <button type="button" class="btn btn-default {{ctx.selectionFormatState.isItalic ? 'active' : ''}}" ng-click="applyItalicStyle()">Italic</button>
                            <button type="button" class="btn btn-default {{ctx.selectionFormatState.isUnderline ? 'active' : ''}}" ng-click="applyUnderlineStyle()">Underline</button>
                        </div>
                    </div>
                    <div>
                        Color:
                        <div class="btn-group">
                            <button type="button" class="btn btn-default" ng-click="showColorPicker($event, false)">Fore Color</button>
                            <button type="button" class="btn btn-default" ng-click="showColorPicker($event, true)">Fill Color</button>
                        </div>
                        Alignment:
                        <div class="btn-group">
                            <button type="button" class="btn btn-default {{ctx.selectionFormatState.textAlign === 'left' ? 'active' : ''}}" ng-click="applyCellTextAlign('left')">Left</button>
                            <button type="button" class="btn btn-default {{ctx.selectionFormatState.textAlign === 'center' ? 'active' : ''}}" ng-click="applyCellTextAlign('center')">Center</button>
                            <button type="button" class="btn btn-default {{ctx.selectionFormatState.textAlign === 'right' ? 'active' : ''}}" ng-click="applyCellTextAlign('right')">Right</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Merging -->
        <h2 id="cellMerge">
            Cell Merging
        </h2>
        <p>
            FlexSheet supports merging the selected cells into one by invoking the <b>mergeRange</b> method.
        </p>
        <p>
            If the selected cells contain merged cell, the mergeRange method will un-merge the merged cell. Otherwise, it will merge the selected cells into one cell.
        </p>
        <p>
            FlexSheet allows merging of cells that contain any data. This is different from FlexGrid, which supports content-driven cell merging.
        </p>
        <div class="row">
            <div class="col-md-6">
                <app-tab>
                    <app-tab-pane title="HTML">
                        <div class="pane-content">
&lt;wj-flex-sheet control="ctx.mergeCellSheet" initialized="initializeMergeCellSheet(s)"&gt;
    &lt;wj-sheet name="Unbound" row-count="20" column-count="8"&gt;&lt;/wj-sheet&gt;
&lt;/wj-flex-sheet&gt;
&lt;button type="button" class="btn btn-default" ng-click="mergeCells()"&gt;{&#8203;{ctx.mergeState.isMergedCell ? 'UnMerge' : 'Merge'}}&lt;/button&gt;
                        </div>
                    </app-tab-pane>
                    <app-tab-pane title="JS">
                        <div class="pane-content">
$scope.mergeCells = function () {
    var flexSheet = $scope.ctx.mergeCellSheet;
    if (flexSheet) {
        flexSheet.mergeRange();
        $scope.ctx.mergeState = flexSheet.getSelectionFormatState();
        safeApply('ctx.mergeState');
    }
}
                        </div>
                    </app-tab-pane>
                </app-tab>
            </div>
            <div class="col-md-6">
                <h4>
                    Result (live):
                </h4>
                <wj-flex-sheet control="ctx.mergeCellSheet" initialized="initializeMergeCellSheet(s)">
                    <wj-sheet name="Unbound" row-count="20" column-count="8"></wj-sheet>
                </wj-flex-sheet>
                <button type="button" class="btn btn-default" ng-click="mergeCells()">{{ctx.mergeState.isMergedCell ? 'UnMerge' : 'Merge'}}</button>
            </div>
        </div>

        <!-- Drag & Drop -->
        <h2 id="dragDrop">
            Drag & Drop
        </h2>
        <p>
            FlexSheet supports dragging and dropping the columns or rows into other columns or rows.
        </p>
        <p>
            FlexSheet not only copies or moves the data of the cells, but also copies or moves the style of the cells.
        </p>
        <p>
            When you drag and drop columns/rows without pressing any key, it will move the selected columns or rows into the target columns or rows.
        </p>
        <p>
            When you drag and drop columns/rows with <b>'Ctrl'</b> key pressed, it will copy the selected columns or rows into the target columns or rows.
        </p>
        <p>
            When you drag and drop columns/rows with <b>'Shift'</b> key pressed, it will change the position of the selected columns or rows with the target columns or rows.
        </p>
        <div class="row">
            <div class="col-md-6">
                <app-tab>
                    <app-tab-pane title="HTML">
                        <div class="pane-content">
&lt;wj-flex-sheet initialized="initializeDragDropSheet(s)"&gt;
    &lt;wj-sheet name="Unbound" row-count="12" column-count="8"&gt;&lt;/wj-sheet&gt;
&lt;/wj-flex-sheet&gt;
                        </div>
                    </app-tab-pane>
                </app-tab>
            </div>
            <div class="col-md-6">
                <h4>
                    Result (live):
                </h4>
                <wj-flex-sheet initialized="initializeDragDropSheet(s)">
                    <wj-sheet name="Unbound" row-count="12" column-count="8"></wj-sheet>
                </wj-flex-sheet>
            </div>
        </div>

        <!-- Frozen Cells -->
        <h2 id="frozenCells">
            Frozen Cells
        </h2>
        <p>
            FlexSheet allows you to freeze the rows and columns of the selected cell by the <b>freezeAtCursor</b> method.
        </p>
        <div class="row">
            <div class="col-md-6">
                <app-tab>
                    <app-tab-pane title="HTML">
                        <div class="pane-content">
&lt;wj-flex-sheet control="ctx.frozenSheet" initialized="initializeFrozenSheet(s)"&gt;
    &lt;wj-sheet name="Unbound" row-count="20" column-count="8"&gt;&lt;/wj-sheet&gt;
&lt;/wj-flex-sheet&gt;
&lt;button type="button" class="btn btn-default" ng-click="freezeCells()"&gt;{&#8203;{ctx.isFrozen ? 'UnFreeze' : 'Freeze'}}&lt;/button&gt;
                        </div>
                    </app-tab-pane>
                    <app-tab-pane title="JS">
                        <div class="pane-content">
$scope.freezeCells = function () {
    var flexSheet = $scope.ctx.frozenSheet;
    if (flexSheet) {
        flexSheet.freezeAtCursor();
        if (flexSheet.frozenColumns &gt; 0 || flexSheet.frozenRows &gt; 0) {
            $scope.ctx.isFrozen = true;
        } else {
            $scope.ctx.isFrozen = false;
        }
    }
};
                        </div>
                    </app-tab-pane>
                </app-tab>
            </div>
            <div class="col-md-6">
                <h4>
                    Result (live):
                </h4>
                <wj-flex-sheet control="ctx.frozenSheet" initialized="initializeFrozenSheet(s)">
                    <wj-sheet name="Unbound" row-count="20" column-count="8"></wj-sheet>
                </wj-flex-sheet>
                <button type="button" class="btn btn-default" ng-click="freezeCells()">{{ctx.isFrozen ? 'UnFreeze' : 'Freeze'}}</button>
            </div>
        </div>

        <!-- Undo/Redo -->
        <h2 id="undoRedo">
            Undo / Redo
        </h2>
        <p>
            The FlexSheet control enables you to undo/redo following operations:
        </p>
        <ol>
            <li><b>Editing cells</b></li>
            <li><b>Resizing row/column</b></li>
            <li><b>Adding/Removing rows/columns</b></li>
            <li><b>Changing cell style</b></li>
            <li><b>Merging cells</b></li>
            <li><b>Sorting</b></li>
            <li><b>Dragging and Dropping rows/columns</b></li>
        </ol>
        <div class="row">
            <div class="col-md-6">
                <app-tab>
                    <app-tab-pane title="HTML">
                        <div class="pane-content">
&lt;wj-flex-sheet control="ctx.undoSheet" initialized="initializeUndoSheet(s)"&gt;
    &lt;wj-sheet name="Unbound" row-count="20" column-count="8"&gt;&lt;/wj-sheet&gt;
&lt;/wj-flex-sheet&gt;
&lt;button type="button" class="btn btn-default" ng-disabled="!(ctx.undoStack && ctx.undoStack.canUndo)" ng-click="undo()"&gt;Undo&lt;/button&gt;
&lt;button type="button" class="btn btn-default" ng-disabled="!(ctx.undoStack && ctx.undoStack.canRedo)" ng-click="redo()"&gt;Redo&lt;/button&gt;
                        </div>
                    </app-tab-pane>
                    <app-tab-pane title="JS">
                        <div class="pane-content">
// Excutes undo command.
$scope.undo = function () {
    $scope.ctx.undoSheet.undo();
};

// Excutes redo command.
$scope.redo = function () {
    $scope.ctx.undoSheet.redo();
};
                        </div>
                    </app-tab-pane>
                </app-tab>
            </div>
            <div class="col-md-6">
                <h4>
                    Result (live):
                </h4>
                <wj-flex-sheet control="ctx.undoSheet" initialized="initializeUndoSheet(s)">
                    <wj-sheet name="Unbound" row-count="20" column-count="8"></wj-sheet>
                </wj-flex-sheet>
                <button type="button" class="btn btn-default" ng-disabled="!(ctx.undoStack && ctx.undoStack.canUndo)" ng-click="undo()">Undo</button>
                <button type="button" class="btn btn-default" ng-disabled="!(ctx.undoStack && ctx.undoStack.canRedo)" ng-click="redo()">Redo</button>
            </div>
        </div>

        <!-- Formulas -->
        <h2 id="formulas">
            Formulas
        </h2>
        <p>
            The FlexSheet control has a built-in calculation engine that supports over 80 functions just like Microsoft Excel. (<a href="http://wijmo.com/5/docs/static/FlexSheetFunctions.html" target="_blank">See complete list.</a>)
        </p>
        <div class="row">
            <div class="col-md-6">
                <app-tab>
                    <app-tab-pane title="HTML">
                        <div class="pane-content">
&lt;wj-flex-sheet control="ctx.formulaSheet" initialized="initializeFormulaSheet(s)"&gt;
    &lt;wj-sheet name="Expence Report" row-count="14" column-count="6"&gt;&lt;/wj-sheet&gt;
&lt;/wj-flex-sheet&gt;
&lt;div&gt;&lt;b&gt;Cell Content: &lt;/b&gt;{&#8203;{ctx.currentCellData}}&lt;/div&gt;
                        </div>
                    </app-tab-pane>
                </app-tab>
            </div>
            <div class="col-md-6">
                <h4>
                    Result (live):
                </h4>
                <wj-flex-sheet control="ctx.formulaSheet" initialized="initializeFormulaSheet(s)">
                    <wj-sheet name="Expence Report" row-count="14" column-count="6"></wj-sheet>
                </wj-flex-sheet>
                <div><b>Cell Content: </b>{{ctx.currentCellData}}</div>
            </div>
        </div>

        <!-- Custom Function -->
        <h2 id="customFunction">
            Custom Function
        </h2>
        <p>
            Although the functions provided in FlexSheet should cover a vast majority of use scenarios, still there may be some cases where users may need additional functions.
        </p>
        <p>
            FlexSheet provides two methods that allow you to add your own custom functions: <b>addCustomFunction</b> and <b>unknownFunction</b>.
        </p>
        <p>
            The <b>addCustomFunction</b> method adds a custom function to the list of built-in functions.
        </p>
        <p>
            The addCustomFunction method is usually the best way to add custom functions to the FlexSheet calculation engine. However, there are scenarios where the function names are variable or unknown ahead of time. For example, named ranges or value dictionaries.
        </p>
        <p>
            In these situations, you can use the <b>unknownFunction</b> event to look up the value of a function dynamically. When the FlexSheet detects an unknown function name, it raises the unknownFunction event and provides parameters that contain the function name and parameters. The event handler then calculates the result and returns the value.
        </p>
        <div class="row">
            <div class="col-md-6">
                <app-tab>
                    <app-tab-pane title="HTML">
                        <div class="pane-content">
&lt;wj-flex-sheet control="ctx.customFuncSheet" initialized="initializeCustomFuncSheet(s)"&gt;
    &lt;wj-sheet name="Custom Function" row-count="25" column-count="6"&gt;&lt;/wj-sheet&gt;
&lt;/wj-flex-sheet&gt;
                        </div>
                    </app-tab-pane>
                    <app-tab-pane title="JS">
                        <div class="pane-content">
flexSheet.addCustomFunction('customSumProduct', function (range1, range2) {
    var flexSheet = $scope.ctx.customFuncSheet,
    result = 0,
    val1, val2;

    if (range1.rowSpan === range2.rowSpan && range1.columnSpan === range2.columnSpan) {
        for (var rowIndex = 0; rowIndex &lt; range1.rowSpan; rowIndex++) {
            for (var columnIndex = 0; columnIndex &lt; range1.columnSpan; columnIndex++) {
                val1 = +flexSheet.getCellValue(range1.topRow + rowIndex, range1.leftCol + columnIndex, false);
                val2 = +flexSheet.getCellValue(range2.topRow + rowIndex, range2.leftCol + columnIndex, false);
                result += val1 * val2;
            }
        }
    }
    return result;
}, 'Custom SumProduct Function', 2, 2);

flexSheet.unknownFunction.addHandler(function (sender, e) {
    var result = '';
    if (e.params) {
        for (var i = 0; i < e.params.length; i++) {
            result += e.params[i];
        }
    }
    e.value = result;
});
                        </div>
                    </app-tab-pane>
                </app-tab>
            </div>
            <div class="col-md-6">
                <h4>
                    Result (live):
                </h4>
                <wj-flex-sheet control="ctx.customFuncSheet" initialized="initializeCustomFuncSheet(s)">
                    <wj-sheet name="Custom Function" row-count="25" column-count="6"></wj-sheet>
                </wj-flex-sheet>
            </div>
        </div>

        <!-- Excel I/O -->
        <h2 id="excelIO">
            Excel I/O
        </h2>
        <p>
            FlexSheet supports saving/loading xlsx file by using the client <b>'save'</b> and <b>'load'</b> method.
        </p>
        <div class="row">
            <div class="col-md-6">
                <app-tab>
                    <app-tab-pane title="HTML">
                        <div class="pane-content">
&lt;wj-flex-sheet control="ctx.excelIOSheet" initialized="initializeExcelIOSheet(s)"&gt;
    &lt;wj-sheet name="Country" items-source="ctx.data"&gt;&lt;/wj-sheet&gt;
    &lt;wj-sheet name="Unbound" row-count="20" column-count="8"&gt;&lt;/wj-sheet&gt;
&lt;/wj-flex-sheet&gt;
&lt;div class="form-inline well well-lg"&gt;
    &lt;input type="file" class="form-control" id="importFile" accept="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" /&gt;
    &lt;button class="btn btn-default" ng-click="load()"&gt;Load&lt;/button&gt;
&lt;/div&gt;
&lt;div class="form-inline well well-lg"&gt;
    File Name:
    &lt;input type="text" class="form-control" ng-model="ctx.fileName" /&gt;
    &lt;button class="btn btn-default" ng-click="save()"&gt;Save&lt;/button&gt;
&lt;/div&gt;
                        </div>
                    </app-tab-pane>
                    <app-tab-pane title="JS">
                        <div class="pane-content">
$scope.load = function () {
    var flexSheet = $scope.ctx.excelIOSheet,
    fileInput = document.getElementById('importFile');
    if (flexSheet && fileInput.files[0]) {
        flexSheet.load(fileInput.files[0]);
    }
};

$scope.save = function () {
    var flexSheet = $scope.ctx.excelIOSheet,
    fileName;
    if (flexSheet) {
        if (!!$scope.ctx.fileName) {
            fileName = $scope.ctx.fileName;
        } else {
            fileName = 'FlexSheet.xlsx';
        }
        flexSheet.save(fileName);
    }
};
                        </div>
                    </app-tab-pane>
                </app-tab>
            </div>
            <div class="col-md-6">
                <h4>
                    Result (live):
                </h4>
                <wj-flex-sheet control="ctx.excelIOSheet" initialized="initializeExcelIOSheet(s)">
                    <wj-sheet name="Country" items-source="ctx.data"></wj-sheet>
                    <wj-sheet name="Unbound" row-count="20" column-count="8"></wj-sheet>
                </wj-flex-sheet>
                <div class="form-inline well well-lg">
                    <input type="file" class="form-control" id="importFile" accept="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" />
                    <button class="btn btn-default" ng-click="load()">Load</button>
                </div>
                <div class="form-inline well well-lg">
                    File Name:
                    <input type="text" class="form-control" ng-model="ctx.fileName" />
                    <button class="btn btn-default" ng-click="save()">Save</button>
                </div>
            </div>
        </div>
    </div>
    <script src="http://cdn.wijmo.com/wijmo.sample.toolbar.js" type="text/javascript"></script>
</body>
</html>
