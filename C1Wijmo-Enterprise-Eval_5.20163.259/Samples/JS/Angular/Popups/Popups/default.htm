<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>Wijmo Popups</title>

    <!-- Angular/Bootstrap -->
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js"></script>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap-theme.min.css">

    <!-- Wijmo -->
    <link href="styles/vendor/wijmo.min.css" rel="stylesheet" />
    <script src="scripts/vendor/wijmo.min.js"></script>
    <script src="scripts/vendor/wijmo.input.min.js"></script>
    <script src="scripts/vendor/wijmo.angular.min.js"></script>

    <!-- app scripts/styles -->
    <script src="scripts/app.js" type="text/javascript"></script>
    <script src="scripts/controllers/appCtrl.js" type="text/javascript"></script>
    <link href="styles/app.css" rel="stylesheet" />

</head>

<body ng-app="app" ng-controller="appCtrl">
    <div class="header">
        <div class="container">
            <img src="resources/wijmo5.png" alt="Wijmo 5" />
            <h1>
                Wijmo 5 Popups
            </h1>
            <p>
                Show dialogs, forms, or arbitrary elements as popups associated with a parent element.
            </p>
        </div>
    </div>

    <div class="container">

        <p>
            Wijmo 5 introduces a <b>Popup</b> control that can be used to display arbitrary
            content as dialogs (centered on the screen, without an owner element), or as
            popups (located relative to an owner element).</p>

        <h3>
            Dialogs (Popups with no owner)</h3>
        <p>
            Dialogs are <b>Popups</b> with no owner element. They must be shown by calling the
            <b>show</b> method.</p>
        <p>
            Dialogs can be modal or modeless. Modal dialogs have a dark backdrop, and 
            if their <b>hideTrigger</b> property is set to <b>None</b>, they cannot
            lose focus and must be dismissed by the user, either by pressing escape
            or by clicking an element on the dialog itself.</p>
        <p>
            Notice the following features provided by the <b>Popup</b> control:</p>
        <ul>
            <li>
                <b>Element positioning</b>: The popups are centered on the screen or positioned
                above or below the owner element, with edge-detection.</li>
            <li>
                <b>Focus handling</b>: Input elements get the focus when the dialog is 
                displayed, with support for the 'autofocus' attribute. Modal popups
                keep the focus within the control when the user presses the Tab key.
            </li>
            <li>
                <b>Keyboard handling</b>: Popups are hidden when the user presses the Escape
                key, or when they press the Enter key and the popup contains no elements
                in an invalid state.
            </li>
        </ul>

        <!-- define dialogs and buttons to show each one -->
        <wj-popup 
            class="modal-content" 
            control="dialogs.login"
            hiding="hiding(s,e)">
            <ng-include src="'partials/frmLogIn.htm'"></ng-include>
        </wj-popup>
        <button class="btn btn-primary" ng-click="dialogs.login.show(true)">
            log in...
        </button>

        <wj-popup
            class="modal-content"
            control="dialogs.create"
            hiding="hiding(s,e)">
            <ng-include src="'partials/frmCreateAccount.htm'"></ng-include>
        </wj-popup>
        <button class="btn btn-primary" ng-click="dialogs.create.show(true)">
            create account...
        </button>

        <wj-popup
            class="modal-content"
            control="dialogs.edit"
            hiding="hiding(s,e)">
            <ng-include src="'partials/frmEditAccount.htm'"></ng-include>
        </wj-popup>
        <button class="btn btn-primary" ng-click="dialogs.edit.show(true)">
            edit account...
        </button>

        <h3>
            Custom CSS transitions</h3>
        <p>
            The <b>Popup</b> class has two properties called <b>fadeIn</b> and <b>fadeOut</b> 
            that add simple animations when the <b>Popup</b> is shown or hidden.
            Both are set to true by default.</p>
        <p>
            You can create your own custom CSS-based animations by adding and removing classes
            to the <b>Popup</b>'s host element in response to the <b>showing</b> and <b>hiding</b>
            events, and defining CSS rules that apply animations based on those classes.</p>
        <p>
            For example, these rules specify a hidden state for elements with the <b>custom-animation</b>
            class, and a visible state for elements with the <b>custom-animation-visible</b> class:</p>
<pre>/* CSS animations for fading in and out */
.custom-animation {
    opacity: 0;
    transform: rotate3d(1, .5, .5, 180deg) scale(0.5);
    transition: all ease-out 0.4s;
}
.custom-animation-visible {
    opacity: 1;
    transform: none;
    transition: all ease-in 0.3s;
}</pre>
        <p>
            Note that:</p>
        <ul>
            <li>
                The custom styles are applied only to the <b>Popup</b> element, not to the modal backdrop.</li>
            <li>
                When hiding the <b>Popup</b>, you have a 400ms interval before the <b>Popup</b> is 
                removed from the DOM, so any CSS display transitions should have the same duration.</li>
        </ul>
        <p>
            Click the button below to see the effect of applying these classes to a <b>Popup</b>:</p>

        <wj-popup
            class="modal-content custom-animation"
            control="dialogs.animated"
            fade-in="false"
            showing="showingAnimated(s,e)"
            hiding="hidingAnimated(s,e)">
            <ng-include src="'partials/frmEditAccount.htm'"></ng-include>
        </wj-popup>
        <button class="btn btn-primary" ng-click="dialogs.animated.show(true)">
            edit account with custom animation...
        </button>


        <h3>
            Popups and Promises</h3>
        <p>
            You can easily wrap a <b>Popup</b> in a JavaScript Promise, show the
            dialog and resolve or reject the promise based on the <b>dialogResult</b>.
        </p>
        <p>
            For example, here is a function that creates a JavaScript Promise. 
            To use the Promise, you would call its 'then' method and pass callbacks 
            for the 'resolve' and 'reject' results. In this case, 'resolve' is 
            called when the user submits the dialog, and 'reject' when the dialog
            is closed by pressing the Escape key or the close button on the
            dialog's header.
        </p>
        <pre>// create Popup Promise
function getPopupPromise() {
    var p = new Promise(function (resolve, reject) {
        var popup = $scope.dialogs.login;
        popup.show(true);
        popup.hidden.addHandler(function () {
            popup.hidden.removeAllHandlers();
            if (popup.dialogResult == 'submit') {
                resolve(popup);
            } else {
                reject(popup);
            }
        });
    });
    return p;
}</pre>

        <div ng-show="browserSupportsPromises">
            <p>
                Click this button to see how this works:
            </p>
            <button class="btn btn-primary" ng-click="popupPromise()">
                Show Popup as a Promise
            </button>
        </div>
        <p ng-hide="browserSupportsPromises">
            Unfortunately, we can't show you this here because the browser you are
            using does not support promises (Chrome, Edge, and FireFox do; IE doesn't...)
        </p>

        <h3>
            Popovers (Popups with owner elements)</h3>
        <p>
            <b>Popups</b> may have owner elements that can be used to control their visibility.
            The <b>showTrigger</b> and <b>hideTrigger</b> properties determine whether the
            <b>Popups</b> should be shown or hidden when the owner element is clicked or when
            the popup loses the focus.</p>

        <!-- first element with popup -->
        <button id="button1" type="button" class="btn btn-lg btn-primary">
            Click to toggle Popup
            <br>
            <small>(showTrigger=hideTrigger=Click)</small>
        </button>
        <wj-popup class="popover" owner="#button1" show-trigger="Click" hide-trigger="Click">
            <ng-include src="'partials/popover.htm'"></ng-include>
        </wj-popup>

        <!-- second element with popup -->
        <button id="button2" type="button" class="btn btn-lg btn-primary">
            Click to show Popup
            <br>
            <small>(showTrigger=Click, hideTrigger=Blur)</small>
        </button>
        <wj-popup class="popover" owner="#button2" show-trigger="Click" hide-trigger="Blur">
            <ng-include src="'partials/popover.htm'"></ng-include>
        </wj-popup>

        <!-- third element with popup -->
        <button id="button3" type="button" class="btn btn-lg btn-primary">
            Click to show Popup form
            <br>
            <small>(showTrigger=Click, hideTrigger=None)</small>
        </button>
        <wj-popup class="popover" owner="#button3" show-trigger="Click" hide-trigger="None">
            <ng-include src="'partials/popoverForm.htm'"></ng-include>
        </wj-popup>
    </div>
    <script src="http://cdn.wijmo.com/wijmo.sample.toolbar.js" type="text/javascript"></script>
</body>
</html>
