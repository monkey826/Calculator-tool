<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>MultiRow Intro</title>

    <!-- use the latest version of IE -->
    <meta http-equiv="X-UA-Compatible" content="IE=Edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <!-- Angular/Bootstrap/jQuery -->
    <link rel="stylesheet" type="text/css" href="https://netdna.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css" />
    <script src="http://code.jquery.com/jquery-2.2.4.min.js"></script>
    <script src="https://netdna.bootstrapcdn.com/bootstrap/3.3.2/js/bootstrap.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.3.15/angular.min.js"></script>

    <!-- Wijmo -->
    <link href="styles/vendor/wijmo.min.css" rel="stylesheet" />
    <script src="scripts/vendor/wijmo.min.js"></script>
    <script src="scripts/vendor/wijmo.grid.min.js"></script>
    <script src="scripts/vendor/wijmo.grid.multirow.min.js"></script>
    <script src="scripts/vendor/wijmo.input.min.js"></script>
    <script src="scripts/vendor/wijmo.grid.filter.min.js"></script>
    <script src="scripts/vendor/wijmo.angular.min.js"></script>

    <!-- app scripts and styles -->
    <script src="scripts/app.js"></script>
    <script src="scripts/controllers/appCtrl.js"></script>
    <script src="scripts/directives/appDctv.js"></script>
    <link href="styles/app.css" rel="stylesheet" />
</head>
<body ng-app="app" ng-controller="appCtrl">

    <!-- header -->
    <div class="header">
        <div class="container">
            <img src="resources/wijmo5.png" alt="Wijmo 5" />
            <h1>
                MultiRow 101
            </h1>
            <p>
                This page shows how to get started with Wijmo's <b>MultiRow</b> control.</p>
        </div>
    </div>

    <div class="container">

        <!-- getting started -->
        <div>
            <h2>
                Getting Started</h2>
            <p>
                The <b>MultiRow</b> control extends conventional grid layouts by using multiple 
                rows to represent each data item.</p>
            <p>
                The <b>MultiRow</b> control allows users to see and edit data in a tabular form, just like
                other conventional grids. But, <b>MultiRow</b> is different from these grids in a way
                that it allows you to bind each data item to multiple rows, creating form-like interfaces that
                can display a large number of columns with minimal horizontal scrolling.</p>
            <p>
                The <b>MultiRow</b> control extends the <b>FlexGrid</b> control, so if you know how
                to use <b>FlexGrid</b>, you will be able to use <b>MultiRow</b> in no time. 
                The main new property is <b>layoutDefinition</b>, which takes an object that 
                describes the layout of the grid rows and cells.</p>
            <p>
                The <b>MultiRow</b> control is not a simple replacement for conventional grids; 
                it is a specialized tool that fits some particular scenarios really well.</p>
            <p>
                To use the <b>MultiRow</b> control in your applications, add references to the 
                <b>wijmo</b>, <b>wijmo.grid</b>, and <b>wijmo.grid.multirow</b> modules, then 
                instantiate <b>MultiRow</b> controls by giving them host element on the page, 
                or add <b>wj-multi-row</b> directives if you are using AngularJS:</p>

            <app-tab>
                <app-tab-pane title="HTML">
                    <div class="pane-content">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;link href="styles/vendor/wijmo.css" rel="stylesheet" /&gt;
    &lt;script src="scripts/vendor/wijmo.min.js"&gt;&lt;/script&gt;
    &lt;script src="scripts/vendor/wijmo.grid.min.js"&gt;&lt;/script&gt;
    &lt;script src="scripts/vendor/wijmo.grid.multirow.min.js"&gt;&lt;/script&gt;
  &lt;head&gt;
  &lt;body&gt;

    &lt;!-- using AngularJS --&gt;
    &lt;wj-multi-row items-source="data" layout-definition="layoutDef"&gt;
    &lt;/wj-multi-row&gt;
  
    &lt;!-- using pure JS --&gt;
    &lt;div id="multirow"&gt;&lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;
                    </div>
                </app-tab-pane>
                <app-tab-pane title="JS">
                    <div class="pane-content">
onload = function() {

  // create and initialize the MultiRow using pure JavaScript
  var theMultiRow = new wijmo.grid.multirow.MultiRow('#multirow', {
    itemsSource: getData(),
    columnLayout: getColumnLayout()
  });
}
                    </div>
                </app-tab-pane>
            </app-tab>
        </div>

        <!-- columnLayout -->
        <div>
            <h2>
                MultiRow Layout Definition</h2>
            <p>
                The <b>MultiRow</b> control uses multiple rows to display each record. 
                The record layout is defined by the <b>layoutDefinition</b> property.</p>
            <p>
                The <b>layoutDefinition</b> property contains an array of cell group objects 
                with the following properties:</p>
            <ul>
                <li>
                    <b>header</b>: Group name.</li>
                <li>
                    <b>colspan</b>: Number of columns spanned by the group (defaults to one).</li>
                <li>
                    <b>cells</b>: Array of objects representing the cells in the group. 
                    Cells are columns with an additional <b>colspan</b> property.</li>
            </ul>
            <p>
                The example below illustrates the usage of the <b>layoutDefiniton</b> property:</p>
            <p>
                Now, let's look at the same data shown in a <b>MultiRow</b> control with 
                different layouts. Use the combo box to select a layout definition and how 
                the grid groups the data in different ways. Notice that the <b>MultiRow</b> 
                control provides all the usual grid features, including editing, sorting, 
                filtering, and column sizing:
            </p>

            <div class="row">
                <div class="col-md-5">
                    <app-tab>
                        <app-tab-pane title="HTML">
                            <div class="pane-content">
&lt;wj-multi-row
    items-source="orders"
    layout-definition="layoutDefs.currentItem.def"&gt;
&lt;/wj-multi-row&gt;
&lt;wj-combo-box
    items-source="layoutDefs"
    display-member-path="name"
    selected-index-changed="layoutDefChanged(s,e)"&gt;
&lt;/wj-combo-box&gt;
&lt;p&gt;
    {&#8203;{ layoutDefs.currentItem.description }}&lt;/p&gt;
                            </div>
                        </app-tab-pane>
                        <app-tab-pane title="JS">
                            <div class="pane-content">
// sample layout definitions
$scope.layoutDefs = new wijmo.collections.CollectionView([
    {
        name: 'Traditional',
        description: 'Traditional grid view, with one row per record. The user must scroll horizontally to see the whole record.',
        def: [
            { cells: [{ binding: 'id', header:'ID' }]},
            { cells: [{ binding: 'date', header:'Ordered' }]},
            { cells: [{ binding: 'shippedDate', header:'Shipped' }]},
            // ... one group per column ...
        ]
    },
    {
        name: 'Compact',
        description: 'This view uses two rows per record. The layout is divided into three column groups: order, customer, and shipper',
        def: [
            {
                header: 'Order', colspan: 2, cells: [
                    { binding: 'id', header: 'ID' },
                    { binding: 'date', header: 'Ordered' },
                    { binding: 'amount', header: 'Amount' },
                    { binding: 'shippedDate', header: 'Shipped' }
                ]
            }, 
            // ... two more groups for customers and shippers ...
        ]
    },
    {
        name: 'Detailed',
        description: 'This view uses three rows per record. The layout is divided into three column groups: order, customer, and shipper',
        def: [
            {
                header: 'Order', colspan: 2, cells: [
                    { binding: 'id', header: 'ID', colspan: 2 },
                    { binding: 'amount', header: 'Amount', colspan: 2 },
                    { binding: 'date', header: 'Ordered' },
                    { binding: 'shippedDate', header: 'Shipped' }
                ]
            },
            // ... two more groups for customers and shippers ...
        ]
    }
]);
                            </div>
                        </app-tab-pane>
                    </app-tab>
                </div>
                <div class="col-md-7">
                    <h4>Result (live):</h4>
                    <wj-multi-row
                        items-source="orders"
                        layout-definition="layoutDefs.currentItem.def">
                    </wj-multi-row>
                    <wj-combo-box
                        items-source="layoutDefs"
                        display-member-path="name">
                    </wj-combo-box>
                    <p>
                        {{ layoutDefs.currentItem.description }}</p>
                </div>
            </div>

            <p>
                The <b>layoutDefinition</b> property specifies the layout of the cells in the
                grid. It contains an array of cell group objects. Each cell group specifies
                how many columns the group should span, and the cells that make up each group.</p>
            <p>
                The image below illustrates how a cell group is interpreted and turned into
                a grid layout:</p>

            <img src="resources/cellGroup.png" alt="cell group">

            <p>
                The group spans three grid columns. It contains six cells with different spans.
                When generating the layout, the grid fits as many cells as possible in each 
                row, and wraps to the next row when the group span is reached. The last cell in 
                each row is automatically expanded to fill <b>colspan</b> of the group. 
                The process is similar to wrapping of text to create a paragraph.</p>
            <p>
                The same process is applied to every group in the <b>layoutDefinition</b>
                object.
        </div>

        <!-- collapsible headers -->
        <div>
            <h2>
                Collapsible Column Headers</h2>
            <p>
                By default, the <b>MultiRow</b> control creates column headers that span multiple 
                rows and shows the header for each cell defined in the <b>layoutDefinition</b>.</p>
            <p>
                These cell-specific column headers may be used to sort or filter the data as
                you would do in a conventional grid.
            <p>
                In some cases, you may want to collapse the column headers to a single line,
                showing only the group names rather than individual cells. This saves space
                at the expense of having individual cell headers. To collapse the column 
                headers, set the <b>collapsedHeaders</b> property to true. In these scenarios,
                remember to set the <b>header</b> property on the groups in order to avoid 
                empty column headers.</p>

            <div class="row">
                <div class="col-md-5">
                    <app-tab>
                        <app-tab-pane title="HTML">
                            <div class="pane-content">
&lt;wj-multi-row
    items-source="orders"
    layout-definition="ldThreeLines"
    collapsed-headers="{&#8203;{ true }}"
    show-header-collapse-button="{&#8203;{ true }}"
    control="hdrGrid"&gt;
&lt;/wj-multi-row&gt;

&lt;label&gt;
    &lt;input type="checkbox" ng-model="hdrGrid.collapsedHeaders"&gt;
    CollapsedHeaders
&lt;/label&gt;
&lt;label&gt;
    &lt;input type="checkbox" ng-model="hdrGrid.showHeaderCollapseButton"&gt;
    Show Header Collapse Button
&lt;/label&gt;
                            </div>
                        </app-tab-pane>
                        <app-tab-pane title="JS">
                            <div class="pane-content">
// no code required
                            </div>
                        </app-tab-pane>
                    </app-tab>
                </div>
                <div class="col-md-7">
                    <h4>Result (live):</h4>
                    <wj-multi-row
                        items-source="orders"
                        layout-definition="ldThreeLines"
                        collapsed-headers="{{ true }}"
                        show-header-collapse-button="{{ true }}"
                        control="hdrGrid">
                    </wj-multi-row>
                    <label>
                        <input type="checkbox" ng-model="hdrGrid.collapsedHeaders">
                        Collapsed Headers
                    </label>
                    <br/>
                    <label>
                        <input type="checkbox" ng-model="hdrGrid.showHeaderCollapseButton">
                        Show Header Collapse Button
                    </label>
                </div>
            </div>
        </div>

        <!-- fully expanded headers -->
        <div>
            <h2>
                Fully Expanded Column Headers</h2>
            <p>
                Setting the <b>collapsedHeaders</b> property to true causes the grid to show
                a single row of column headers containing the group names. Setting it to false
                cause it to show a group of rows with the same layout as the data, and column
                names in the cells.</p>
            <p>
                If you want to display the group and the column names, set the 
                <b>collapsedHeaders</b> property to <b>null</b> instead of 
                <b>true</b> or <b>false</b>.</p>
            <p>
                If you choose to show group and column headers, you may also want to use 
                CSS to differentiate their appearance. This can be done easily using the
                <code>wj-group-header</code> class added to the group headers.</p>
            <p>
                The sample below demonstrates:</p>

            <div class="row">
                <div class="col-md-5">
                    <app-tab>
                        <app-tab-pane title="HTML">
                            <div class="pane-content">
&lt;wj-multi-row
    items-source="orders"
    layout-definition="ldThreeLines"
    initialized="initExpandAll(s, e)"
    class="expanded-groups"&gt;
&lt;/wj-multi-row&gt;
                            </div>
                        </app-tab-pane>
                        <app-tab-pane title="JS">
                            <div class="pane-content">
// setting collapsedHeaders to null shows 
// both group and column headers
$scope.initExpandAll = function (s, e) {
    s.collapsedHeaders = null;
}
                            </div>
                        </app-tab-pane>
                        <app-tab-pane title="CSS">
                            <div class="pane-content">
/* custom styling for group headers */
.expanded-groups .wj-cell.wj-group-header {
    background-color: #abcfc7;
}
                            </div>
                        </app-tab-pane>
                    </app-tab>
                </div>
                <div class="col-md-7">
                    <h4>Result (live):</h4>
                    <wj-multi-row
                        items-source="orders"
                        layout-definition="ldThreeLines"
                        initialized="initExpandAll(s, e)"
                        class="expanded-groups">
                    </wj-multi-row>
                </div>
            </div>
        </div>

        <!-- styling records, groups, and cells -->
        <div>
            <h2>
                Styling Records, Groups, and Cells</h2>
            <p>
                In most of the applications, you would want to show where each record and group starts or ends.
                The <b>MultiRow</b> control enables this by adding CSS class names to cell elements 
                in the first and last row/column of each group. The class names are 
                <code>wj-record-start</code>, <code>wj-record-end</code>, <code>wj-group-start</code>,
                and <code>wj-group-end</code>.</p>
            <p>
                The example below shows how you can use these class names in CSS rules to customize
                the appearance of the record and group delimiters. It also shows how you can use the
                standard <b>cssClass</b> property to customize the appearance of specific cells 
                within a group:</p>

            <div class="row">
                <div class="col-md-5">
                    <app-tab>
                        <app-tab-pane title="HTML">
                            <div class="pane-content">
&lt;wj-multi-row
    class="multirow-css"
    items-source="orders"
    layout-definition="ldThreeLines"&gt;
&lt;/wj-multi-row&gt;
                            </div>
                        </app-tab-pane>
                        <app-tab-pane title="CSS">
                            <div class="pane-content">
/* custom styling for a MultiRow */
.multirow-css .wj-cell.wj-record-end:not(.wj-header) {
    border-bottom-color: #8fabff; /* blue lines between records */
}
.multirow-css .wj-cell.wj-group-end {
    border-right-color: #bc5505; /* brown lines between groups */
}
.multirow-css .wj-cell.id {
    color: #c0c0c0;
}
.multirow-css .wj-cell.amount { 
    color: #014701;
    font-weight: bold;
}
.multirow-css .wj-cell.email {
    color: #0010c0;
    text-decoration: underline;
}
                            </div>
                        </app-tab-pane>
                    </app-tab>
                </div>
                <div class="col-md-7">
                    <h4>Result (live):</h4>
                    <wj-multi-row
                        class="multirow-css"
                        items-source="orders"
                        layout-definition="ldThreeLines">
                    </wj-multi-row>
                </div>
            </div>
        </div>

        <!-- grouping -->
        <div>
            <h2>
                Grouping</h2>
            <p>
                The <b>MultiRow</b> control supports <b>CollectionView</b>-based grouping just 
                like <b>FlexGrid</b>.
                To use grouping, create a <b>CollectionView</b> based on the raw data and add
                one or more <b>GroupDescription</b> objects to the <b>GroupDescriptions</b> array 
                of the collection.</p>

            <div class="row">
                <div class="col-md-5">
                    <app-tab>
                        <app-tab-pane title="HTML">
                            <div class="pane-content">
&lt;wj-multi-row
    items-source="groupedOrders"
    layout-definition="ldThreeLines"
    group-header-format="City: &lt;b&gt;{value} &lt;/b&gt;({count:n0} items)"
    control="groupingGrid"&gt;
&lt;/wj-multi-row&gt;
&lt;label&gt;
    &lt;input type="checkbox" ng-model="groupingGrid.showGroups"&gt;
    Show Groups
&lt;/label&gt;
&lt;br /&gt;
&lt;button class="btn" ng-click="groupingGrid.collapseGroupsToLevel(0)"&gt;
    Collapse All
&lt;/button&gt;
&lt;button class="btn" ng-click="groupingGrid.collapseGroupsToLevel(10)"&gt;
    Expand All
&lt;/button&gt;
                            </div>
                        </app-tab-pane>
                        <app-tab-pane title="JS">
                            <div class="pane-content">
// expose grouped orders to the controller
$scope.groupedOrders = new wijmo.collections.CollectionView(orders, {
        groupDescriptions: [
            'customer.city',
        ],
        newItemCreator: function () {
            return { // add empty customer and shipper objects to new orders
                customer: {},
                shipper: {}
            }
        },
});
                            </div>
                        </app-tab-pane>
                    </app-tab>
                </div>
                <div class="col-md-7">
                    <h4>Result (live):</h4>
                    <wj-multi-row
                        items-source="groupedOrders"
                        layout-definition="ldThreeLines"
                        group-header-format="City: <b>{value} </b>({count:n0} items)"
                        control="groupingGrid">
                    </wj-multi-row>
                    <label>
                        <input type="checkbox" ng-model="groupingGrid.showGroups">
                        Show Groups
                    </label>
                    <br />
                    <button class="btn" ng-click="groupingGrid.collapseGroupsToLevel(0)">
                        Collapse All
                    </button>
                    <button class="btn" ng-click="groupingGrid.collapseGroupsToLevel(10)">
                        Expand All
                    </button>
                </div>
            </div>
        </div>

        <!-- filtering -->
        <div>
            <h2>
                Filtering</h2>
            <p>
                The <b>MultiRow</b> control supports filtering just like <b>FlexGrid</b>.</p>
            <p>
                Filtering is provided by the <b>wijmo.grid.filter.FlexGridFilter</b> class.
                To add filtering UI to <b>MultiRow</b>, create a <b>FlexGridFilter</b> and pass
                <b>MultiRow</b> as a parameter in the constructor.</p>
            <p>
                If you are using AngularJS, you can also add a filter to the grid by embedding a
                <b>wj-flex-grid-filter</b> directive as a child of the grid's directive.</p>

            <div class="row">
                <div class="col-md-5">
                    <app-tab>
                        <app-tab-pane title="HTML">
                            <div class="pane-content">
&lt;wj-multi-row
    items-source="orders"
    layout-definition="ldThreeLines"
    initialized="initFlexFilter(s, e)"&gt;
&lt;/wj-multi-row&gt;
                            </div>
                        </app-tab-pane>
                        <app-tab-pane title="JS">
                            <div class="pane-content">
// add a filter to the MultiRow
$scope.initFlexFilter = function (s, e) {
    var filter = new wijmo.grid.filter.FlexGridFilter(s);
}
                            </div>
                        </app-tab-pane>
                    </app-tab>
                </div>
                <div class="col-md-7">
                    <h4>Result (live):</h4>
                    <wj-multi-row
                        items-source="orders"
                        layout-definition="ldThreeLines"
                        initialized="initFlexFilter(s, e)">
                    </wj-multi-row>
                </div>
            </div>
        </div>

        <!-- freezing -->
        <div>
            <h2>
                Row and Column Freezing</h2>
            <p>
                The <b>MultiRow</b> control allows you to freeze rows and columns so they remain 
                in view as the user scrolls the grid. Frozen cells can be edited and selected as 
                regular cells, exactly as in Excel and in the <b>FlexGrid</b> control.</p>
            <p>
                This example allows you to toggle whether the first group of rows and columns should be 
                frozen.</p>

            <div class="row">
                <div class="col-md-5">
                    <app-tab>
                        <app-tab-pane title="HTML">
                            <div class="pane-content">
&lt;wj-multi-row
    items-source="orders"
    layout-definition="ldTwoLines"
    control="frozenGrid"&gt;
&lt;/wj-multi-row&gt;
&lt;button
    class="btn btn-default"
    ng-click="toggleFreeze(2, 2)"&gt;
    {&#8203;{ frozenGrid.frozenRows == 0 ? 'Freeze' : 'Unfreeze' }}
&lt;/button&gt;
                            </div>
                        </app-tab-pane>
                        <app-tab-pane title="JS">
                            <div class="pane-content">
// toggle frozen rows/columns
$scope.toggleFreeze = function (rows, cols) {
    var flex = $scope.frozenGrid;
    if (flex) {
        flex.frozenColumns = flex.frozenColumns ? 0 : cols;
        flex.frozenRows = flex.frozenRows ? 0 : rows;
    }
}
                            </div>
                        </app-tab-pane>
                        <app-tab-pane title="CSS">
                            <div class="pane-content">
/* custom styling for frozen cells */
.wj-cell.wj-frozen:not(.wj-header):not(.wj-group):not(.wj-state-selected):not(.wj-state-multi-selected) {
    background-color: #f3fbcc;
}
                            </div>
                        </app-tab-pane>
                    </app-tab>
                </div>
                <div class="col-md-7">
                    <h4>Result (live):</h4>
                    <wj-multi-row
                        items-source="orders"
                        layout-definition="ldTwoLines"
                        control="frozenGrid">
                    </wj-multi-row>
                    <button
                      class="btn btn-default"
                      ng-click="toggleFreeze(2, 2)">
                      {{ frozenGrid.frozenRows == 0 ? 'Freeze' : 'Unfreeze' }}
                    </button>
                </div>
            </div>
        </div>

        <!-- paging -->
        <div>
            <h2>
                Paging</h2>
            <p>
                The <b>MultiRow</b> control supports paging through the <b>IPagedCollectionView</b> interface, 
                which is nearly identical to the one in .NET. To enable paging, set the 
                <b>IPagedCollectionView.pageSize</b> property to the number of items you want to display
                on each page, and provide a UI for navigating the pages.</p>
            <p>
                In this example, we use JavaScript to show four items per page. We add navigation buttons, 
                and call <b>IPagedCollectionView</b> method in the button click directives. We use the 
                <b>pageIndex</b> and <b>pageCount</b> properties to show the current page and total number 
                of pages.</p>

            <div class="row">
                <div class="col-md-5">
                    <app-tab>
                        <app-tab-pane title="HTML">
                            <div class="pane-content">
&lt;wj-multi-row
    items-source="pagedOrders"
    layout-definition="ldThreeLines"&gt;
&lt;/wj-multi-row&gt;
&lt;div class="btn-group"&gt;
    &lt;button type="button" class="btn" ng-click="pagedOrders.moveToFirstPage()"&gt;
        &lt;span class="glyphicon glyphicon-fast-backward"&gt;&lt;/span&gt;
    &lt;/button&gt;
    &lt;button type="button" class="btn" ng-click="pagedOrders.moveToPreviousPage()"&gt;
        &lt;span class="glyphicon glyphicon-step-backward"&gt;&lt;/span&gt;
    &lt;/button&gt;
    &lt;button type="button" class="btn" disabled style="width:100px"&gt;
        {{ pagedOrders.pageIndex + 1 | number }} / {{ pagedOrders.pageCount | number }}
    &lt;/button&gt;
    &lt;button type="button" class="btn" ng-click="pagedOrders.moveToNextPage()"&gt;
        &lt;span class="glyphicon glyphicon-step-forward"&gt;&lt;/span&gt;
    &lt;/button&gt;
    &lt;button type="button" class="btn" ng-click="pagedOrders.moveToLastPage()"&gt;
        &lt;span class="glyphicon glyphicon-fast-forward"&gt;&lt;/span&gt;
    &lt;/button&gt;
&lt;/div&gt;
                            </div>
                        </app-tab-pane>
                        <app-tab-pane title="JS">
                            <div class="pane-content">
// expose paged orders to the controller
$scope.pagedOrders = new wijmo.collections.CollectionView(orders, {
    pageSize: 4
});
                            </div>
                        </app-tab-pane>
                    </app-tab>
                </div>
                <div class="col-md-7">
                    <h4>Result (live):</h4>
                    <wj-multi-row
                        style="max-height:800px"
                        items-source="pagedOrders"
                        layout-definition="ldThreeLines">
                    </wj-multi-row>
                    <div class="btn-group">
                      <button type="button" class="btn" ng-click="pagedOrders.moveToFirstPage()">
                        <span class="glyphicon glyphicon-fast-backward"></span>
                      </button>
                      <button type="button" class="btn" ng-click="pagedOrders.moveToPreviousPage()">
                        <span class="glyphicon glyphicon-step-backward"></span>
                      </button>
                      <button type="button" class="btn" disabled style="width:100px">
                        {{ pagedOrders.pageIndex + 1 | number }} / {{ pagedOrders.pageCount | number }}
                      </button>
                      <button type="button" class="btn" ng-click="pagedOrders.moveToNextPage()">
                        <span class="glyphicon glyphicon-step-forward"></span>
                      </button>
                      <button type="button" class="btn" ng-click="pagedOrders.moveToLastPage()">
                        <span class="glyphicon glyphicon-fast-forward"></span>
                      </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- allowAddNew/allowDelete -->
        <div>
            <h2>
                Adding and Deleting Records</h2>
            <p>
                The <b>MultiRow</b> control supports the <b>allowAddNew</b> and <b>allowDelete</b> 
                properties provided by the <b>FlexGrid</b> control.</p>
            <p>
                Setting the <b>allowAddNew</b> property to true causes the grid to display a set of
                'new row template' rows at the bottom of the grid.
                When user starts editing a cell in the new row template, a new item is added 
                to the source collection. When user finishes editing the new item by moving 
                the selection to another row or the focus to another control, the new item is 
                committed.</p>
            <p>
                Setting the <b>allowDelete</b> property to true causes the grid to monitor key presses
                and to delete the current row if user presses the 'Delete' key while an entire
                row is selected.</p>

            <div class="row">
                <div class="col-md-5">
                    <app-tab>
                        <app-tab-pane title="HTML">
                            <div class="pane-content">
&lt;wj-multi-row
    items-source="addNewOrders"
    layout-definition="ldThreeLines"
    show-groups="false"
    allow-add-new="true"
    allow-delete="true"
    control="addNewGrid"&gt;
&lt;/wj-multi-row&gt;
&lt;label&gt;
    &lt;input type="checkbox" ng-model="addNewGrid.allowAddNew"&gt;
    Allow Add New
&lt;/label&gt;
&lt;br/&gt;
&lt;label&gt;
    &lt;input type="checkbox" ng-model="addNewGrid.allowDelete"&gt;
    Allow Delete
&lt;/label&gt;
                            </div>
                        </app-tab-pane>
                        <app-tab-pane title="JS">
                            <div class="pane-content">
// create 'addNewOrders' collection, start with last item selected
$scope.addNewOrders = new wijmo.collections.CollectionView(orders);
$scope.addNewOrders.moveCurrentToLast();
                            </div>
                        </app-tab-pane>
                        <app-tab-pane title="CSS">
                            <div class="pane-content">
/* custom styling for new row templates */
.wj-cell.wj-new:not(.wj-header):not(.wj-group):not(.wj-state-selected):not(.wj-state-multi-selected) {
    background-color: #f3fbcc;
}
                            </div>
                        </app-tab-pane>
                    </app-tab>
                </div>
                <div class="col-md-7">
                    <h4>Result (live):</h4>
                    <wj-multi-row
                        items-source="addNewOrders"
                        layout-definition="ldThreeLines"
                        allow-add-new="true"
                        allow-delete="true"
                        control="addNewGrid">
                    </wj-multi-row>
                    <label>
                        <input type="checkbox" ng-model="addNewGrid.allowAddNew">
                        Allow Add New
                    </label>
                    <br/>
                    <label>
                        <input type="checkbox" ng-model="addNewGrid.allowDelete">
                        Allow Delete
                    </label>
                </div>
            </div>
        </div>
    </div>
    <script src="http://cdn.wijmo.com/wijmo.sample.toolbar.js" type="text/javascript"></script>
</body>

</html>
